-- VHDL Entity ece411.Pipelined_L1_Stage2.symbol
--
-- Created:
--          by - goldste6.ews (gelib-057-21.ews.illinois.edu)
--          at - 03:57:43 04/25/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Pipelined_L1_Stage2 IS
   PORT( 
      CLK             : IN     std_logic;
      Dataout         : IN     LC3b_word;
      MREAD_L         : IN     std_logic;
      MWRITEH_L       : IN     std_logic;
      MWRITEL_L       : IN     std_logic;
      PMDATAIN        : IN     LC3B_OWORD;
      PMRESP_H        : IN     STD_LOGIC;
      RESET_L         : IN     STD_LOGIC;
      ReadIndex       : IN     LC3b_C_INDEX;
      interstage_data : IN     LC3b_cache_interstage_data;
      reuse_data_l    : IN     STD_LOGIC;
      DATAIN          : OUT    LC3b_word;
      PMADDRESS       : OUT    LC3B_WORD;
      PMDATAOUT       : OUT    LC3B_OWORD;
      PMREAD_L        : OUT    STD_LOGIC;
      PMWRITE_L       : OUT    STD_LOGIC;
      feedback        : OUT    LC3b_cache_feedback_data;
      MRESP_H         : BUFFER std_logic
   );

-- Declarations

END Pipelined_L1_Stage2 ;

--
-- VHDL Architecture ece411.Pipelined_L1_Stage2.struct
--
-- Created:
--          by - goldste6.ews (gelib-057-21.ews.illinois.edu)
--          at - 03:57:43 04/25/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF Pipelined_L1_Stage2 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F                   : STD_LOGIC;
   SIGNAL F1                  : STD_LOGIC;
   SIGNAL F2                  : STD_LOGIC;
   SIGNAL F3                  : STD_LOGIC;
   SIGNAL F4                  : STD_LOGIC;
   SIGNAL Index               : LC3b_C_INDEX;
   SIGNAL Offset              : std_logic_vector(2 DOWNTO 0);
   SIGNAL Tag                 : LC3b_C_TAG;
   SIGNAL Way0Dataout         : LC3B_OWORD;
   SIGNAL Way1Dataout         : LC3B_OWORD;
   SIGNAL WayDataIn           : LC3b_OWORD;
   SIGNAL WriteIndex          : LC3b_C_INDEX;
   SIGNAL WriteTag            : LC3b_C_TAG;
   SIGNAL Y                   : std_logic;
   SIGNAL dirty0              : std_logic;
   SIGNAL dirty1              : std_logic;
   SIGNAL evict_buffer_valid  : std_logic;
   SIGNAL evicted             : std_logic;
   SIGNAL in_idlehit          : std_logic;
   SIGNAL in_load             : std_logic;
   SIGNAL in_writeback        : std_logic;
   SIGNAL index_match         : STD_LOGIC;
   SIGNAL last_Set_Dirty      : std_logic;
   SIGNAL last_WayDataIn      : LC3b_OWORD;
   SIGNAL last_WriteTag       : LC3b_c_tag;
   SIGNAL last_lru_data_in    : std_logic;
   SIGNAL last_write0         : std_logic;
   SIGNAL last_write1         : STD_LOGIC;
   SIGNAL load_cache_fwd_pipe : std_logic;
   SIGNAL lru_data_in         : STD_LOGIC;
   SIGNAL miss                : std_logic;
   SIGNAL next_index_match    : std_logic;
   SIGNAL next_replace_way0   : std_logic;
   SIGNAL next_replace_way1   : std_logic;
   SIGNAL replace_way0        : std_logic;
   SIGNAL replace_way1        : std_logic;
   SIGNAL reuse_data          : std_logic;
   SIGNAL set_dirty           : std_logic;
   SIGNAL tag0                : LC3b_C_TAG;
   SIGNAL tag1                : LC3b_C_TAG;
   SIGNAL valid0              : std_logic;
   SIGNAL valid1              : std_logic;
   SIGNAL write0              : std_logic;
   SIGNAL write1              : std_logic;


   -- Component Declarations
   COMPONENT CacheFwdPipe
   PORT (
      CLK                 : IN     std_logic ;
      RESET_L             : IN     STD_LOGIC ;
      WayDataIn           : IN     LC3b_OWORD ;
      WriteTag            : IN     LC3b_C_TAG ;
      load_cache_fwd_pipe : IN     std_logic ;
      lru_data_in         : IN     STD_LOGIC ;
      next_index_match    : IN     std_logic ;
      next_replace_way0   : IN     std_logic ;
      next_replace_way1   : IN     std_logic ;
      set_dirty           : IN     std_logic ;
      write0              : IN     std_logic ;
      write1              : IN     std_logic ;
      index_match         : OUT    STD_LOGIC ;
      last_Set_Dirty      : OUT    std_logic ;
      last_WayDataIn      : OUT    LC3b_OWORD ;
      last_WriteTag       : OUT    LC3b_c_tag ;
      last_lru_data_in    : OUT    std_logic ;
      last_write0         : OUT    std_logic ;
      last_write1         : OUT    STD_LOGIC ;
      replace_way0        : OUT    std_logic ;
      replace_way1        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Cache_Controller
   PORT (
      CLK                : IN     std_logic ;
      PMRESP_H           : IN     STD_LOGIC ;
      RESET_L            : IN     STD_LOGIC ;
      evict_buffer_valid : IN     std_logic ;
      miss               : IN     std_logic ;
      PMREAD_L           : OUT    STD_LOGIC ;
      PMWRITE_L          : OUT    STD_LOGIC ;
      in_idlehit         : OUT    std_logic ;
      in_load            : OUT    std_logic ;
      in_writeback       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Comparator
   GENERIC (
      N     : Integer;
      Delay : time
   );
   PORT (
      A : IN     std_logic_vector (N-1 DOWNTO 0);
      B : IN     std_logic_vector (N-1 DOWNTO 0);
      Y : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Stage2CacheLogic
   PORT (
      CLK                : IN     std_logic ;
      Dataout            : IN     LC3b_word ;
      Index              : IN     LC3b_C_INDEX ;
      MREAD_L            : IN     std_logic ;
      MWRITEH_L          : IN     std_logic ;
      MWRITEL_L          : IN     std_logic ;
      Offset             : IN     std_logic_vector (2 DOWNTO 0);
      PMDATAIN           : IN     LC3B_OWORD ;
      PMRESP_H           : IN     STD_LOGIC ;
      Tag                : IN     LC3b_C_TAG ;
      Way0Dataout        : IN     LC3B_OWORD ;
      Way1Dataout        : IN     LC3B_OWORD ;
      dirty0             : IN     std_logic ;
      dirty1             : IN     std_logic ;
      evicted            : IN     std_logic ;
      in_idlehit         : IN     std_logic ;
      in_load            : IN     std_logic ;
      in_writeback       : IN     std_logic ;
      index_match        : IN     STD_LOGIC ;
      last_Set_Dirty     : IN     std_logic ;
      last_WayDataIn     : IN     LC3b_OWORD ;
      last_WriteTag      : IN     LC3b_c_tag ;
      last_lru_data_in   : IN     std_logic ;
      last_write0        : IN     std_logic ;
      last_write1        : IN     STD_LOGIC ;
      replace_way0       : IN     std_logic ;
      replace_way1       : IN     std_logic ;
      reset_l            : IN     STD_LOGIC ;
      tag0               : IN     LC3b_C_TAG ;
      tag1               : IN     LC3b_C_TAG ;
      valid0             : IN     std_logic ;
      valid1             : IN     std_logic ;
      DATAIN             : OUT    LC3b_word ;
      MRESP_H            : OUT    std_logic ;
      PMADDRESS          : OUT    LC3B_WORD ;
      PMDATAOUT          : OUT    LC3B_OWORD ;
      WayDataIn          : OUT    LC3b_OWORD ;
      WriteIndex         : OUT    LC3b_C_INDEX ;
      WriteTag           : OUT    LC3b_C_TAG ;
      evict_buffer_valid : OUT    std_logic ;
      lru_data_in        : OUT    STD_LOGIC ;
      set_dirty          : OUT    std_logic ;
      write0             : OUT    std_logic ;
      write1             : OUT    std_logic ;
      miss               : BUFFER std_logic 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : CacheFwdPipe USE ENTITY ece411.CacheFwdPipe;
   FOR ALL : Cache_Controller USE ENTITY ece411.Cache_Controller;
   FOR ALL : Comparator USE ENTITY ece411.Comparator;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : Stage2CacheLogic USE ENTITY ece411.Stage2CacheLogic;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   dirty0      <= interstage_data.dirty0;
   valid0      <= interstage_data.valid0;
   tag0        <= interstage_data.tag0;
   Way0Dataout <= interstage_data.Way0Dataout;
   
   dirty1      <= interstage_data.dirty1;
   valid1      <= interstage_data.valid1;
   tag1        <= interstage_data.tag1;
   Way1Dataout <= interstage_data.Way1Dataout;
   
   evicted     <= interstage_data.evicted;
   tag         <= interstage_data.tag;
   index       <= interstage_data.index;
   offset      <= interstage_data.offset(3 downto 1);

   -- HDL Embedded Text Block 2 eb2
   feedback.WriteTag    <= WriteTag;
   feedback.WriteIndex  <= WriteIndex;
   feedback.Set_Dirty   <= Set_Dirty;
   feedback.WayDataIn   <= WayDataIn;
   feedback.write0      <= write0;
   feedback.write1      <= write1;
   feedback.LRU_data_in <= LRU_data_in;
   feedback.LRU_write   <= MRESP_H;
   
   -- load_cache_fwd_pipe  <= MRESP_H;


   -- Instance port mappings.
   aCacheFwdPipe : CacheFwdPipe
      PORT MAP (
         CLK                 => CLK,
         RESET_L             => RESET_L,
         WayDataIn           => WayDataIn,
         WriteTag            => WriteTag,
         load_cache_fwd_pipe => load_cache_fwd_pipe,
         lru_data_in         => lru_data_in,
         next_index_match    => next_index_match,
         next_replace_way0   => next_replace_way0,
         next_replace_way1   => next_replace_way1,
         set_dirty           => set_dirty,
         write0              => write0,
         write1              => write1,
         index_match         => index_match,
         last_Set_Dirty      => last_Set_Dirty,
         last_WayDataIn      => last_WayDataIn,
         last_WriteTag       => last_WriteTag,
         last_lru_data_in    => last_lru_data_in,
         last_write0         => last_write0,
         last_write1         => last_write1,
         replace_way0        => replace_way0,
         replace_way1        => replace_way1
      );
   L1CacheController : Cache_Controller
      PORT MAP (
         CLK                => CLK,
         PMRESP_H           => PMRESP_H,
         RESET_L            => RESET_L,
         evict_buffer_valid => evict_buffer_valid,
         miss               => miss,
         PMREAD_L           => PMREAD_L,
         PMWRITE_L          => PMWRITE_L,
         in_idlehit         => in_idlehit,
         in_load            => in_load,
         in_writeback       => in_writeback
      );
   U_1 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => Index,
         B => ReadIndex,
         Y => Y
      );
   aCacheLogic : Stage2CacheLogic
      PORT MAP (
         CLK                => CLK,
         Dataout            => Dataout,
         Index              => Index,
         MREAD_L            => MREAD_L,
         MWRITEH_L          => MWRITEH_L,
         MWRITEL_L          => MWRITEL_L,
         Offset             => Offset,
         PMDATAIN           => PMDATAIN,
         PMRESP_H           => PMRESP_H,
         RESET_L            => RESET_L,
         Tag                => Tag,
         Way0Dataout        => Way0Dataout,
         Way1Dataout        => Way1Dataout,
         dirty0             => dirty0,
         dirty1             => dirty1,
         evicted            => evicted,
         in_idlehit         => in_idlehit,
         in_load            => in_load,
         in_writeback       => in_writeback,
         index_match        => index_match,
         last_Set_Dirty     => last_Set_Dirty,
         last_WayDataIn     => last_WayDataIn,
         last_WriteTag      => last_WriteTag,
         last_lru_data_in   => last_lru_data_in,
         last_write0        => last_write0,
         last_write1        => last_write1,
         replace_way0       => replace_way0,
         replace_way1       => replace_way1,
         tag0               => tag0,
         tag1               => tag1,
         valid0             => valid0,
         valid1             => valid1,
         DATAIN             => DATAIN,
         MRESP_H            => MRESP_H,
         PMADDRESS          => PMADDRESS,
         PMDATAOUT          => PMDATAOUT,
         WayDataIn          => WayDataIn,
         WriteIndex         => WriteIndex,
         WriteTag           => WriteTag,
         evict_buffer_valid => evict_buffer_valid,
         lru_data_in        => lru_data_in,
         set_dirty          => set_dirty,
         write0             => write0,
         write1             => write1,
         miss               => miss
      );
   U_2 : AND2
      PORT MAP (
         A => next_index_match,
         B => write0,
         F => F
      );
   U_3 : AND2
      PORT MAP (
         A => next_index_match,
         B => write1,
         F => F2
      );
   U_6 : AND2
      PORT MAP (
         A => replace_way0,
         B => reuse_data,
         F => F1
      );
   U_7 : AND2
      PORT MAP (
         A => replace_way1,
         B => reuse_data,
         F => F3
      );
   U_10 : AND3
      PORT MAP (
         A => MREAD_L,
         B => MWRITEH_L,
         C => MWRITEL_L,
         F => F4
      );
   U_4 : NOT1
      PORT MAP (
         A => reuse_data_l,
         F => reuse_data
      );
   U_0 : OR2
      PORT MAP (
         A => reuse_data,
         B => Y,
         F => next_index_match
      );
   U_5 : OR2
      PORT MAP (
         A => F1,
         B => F,
         F => next_replace_way0
      );
   U_8 : OR2
      PORT MAP (
         A => F2,
         B => F3,
         F => next_replace_way1
      );
   U_9 : OR2
      PORT MAP (
         A => F4,
         B => MRESP_H,
         F => load_cache_fwd_pipe
      );

END struct;
