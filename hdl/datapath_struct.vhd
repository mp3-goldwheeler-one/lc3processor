-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - goldste6.ews (evrt-252-12.ews.illinois.edu)
--          at - 14:44:51 02/17/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      ALUMuxSel    : IN     LC3b_4MUX_Sel;
      ALUSubMuxSel : IN     std_logic;
      ALUop        : IN     LC3b_aluop;
      CLK          : IN     std_logic;
      DATAIN       : IN     LC3b_word;
      DestSel      : IN     std_logic;
      LoadIR       : IN     std_logic;
      LoadMAR      : IN     std_logic;
      LoadMDR      : IN     std_logic;
      LoadNZP      : IN     std_logic;
      LoadPC       : IN     std_logic;
      MARMuxSel    : IN     LC3b_4MUX_Sel;
      MDRMuxSel    : IN     std_logic;
      PCMuxSel     : IN     LC3b_4MUX_SEL;
      RESET_L      : IN     std_logic;
      RFMuxSel     : IN     LC3b_8MUX_SEL;
      RegWrite     : IN     std_logic;
      ShiftSel     : IN     std_logic;
      StoreSR      : IN     std_logic;
      AddrParity   : OUT    std_logic;
      CheckN       : OUT    std_logic;
      CheckP       : OUT    std_logic;
      CheckZ       : OUT    std_logic;
      DATAOUT      : OUT    LC3b_word;
      Opcode       : OUT    LC3b_opcode;
      bit5         : OUT    std_logic;
      direction    : OUT    std_logic;
      n            : OUT    std_logic;
      p            : OUT    std_logic;
      z            : OUT    std_logic;
      ADDRESS      : BUFFER LC3b_word
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - goldste6.ews (evrt-252-12.ews.illinois.edu)
--          at - 14:44:52 02/17/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out     : LC3b_word;
   SIGNAL ADJ6out      : LC3b_word;
   SIGNAL ADJ9out      : LC3b_word;
   SIGNAL ALUMUXout    : LC3b_word;
   SIGNAL ALUout       : LC3b_word;
   SIGNAL BRaddout     : LC3b_word;
   SIGNAL GenCCout     : std_logic_vector(2 DOWNTO 0);
   SIGNAL JSRaddout    : LC3b_word;
   SIGNAL MARMuxout    : LC3b_word;
   SIGNAL MDRMuxout    : LC3b_word;
   SIGNAL MDRout       : LC3b_word;
   SIGNAL PCMuxout     : LC3b_word;
   SIGNAL PCPlus2out   : LC3b_word;
   SIGNAL PCSubMuxOut  : LC3b_word;
   SIGNAL PCout        : LC3b_word;
   SIGNAL RFAout       : LC3b_word;
   SIGNAL RFBout       : LC3b_word;
   SIGNAL RFMuxout     : LC3b_word;
   SIGNAL ShiftAmount  : LC3b_word;
   SIGNAL SrcA         : LC3b_reg;
   SIGNAL SrcB         : std_logic_vector(2 DOWNTO 0);
   SIGNAL StoreMuxout  : std_logic_vector(2 DOWNTO 0);
   SIGNAL TrapAddr     : LC3b_word;
   SIGNAL ZextHByte    : LC3b_word;
   SIGNAL ZextLByte    : LC3b_word;
   SIGNAL alusubmuxout : LC3b_word;
   SIGNAL bit11        : std_logic;
   SIGNAL dest         : std_logic_vector(2 DOWNTO 0);
   SIGNAL destmuxout   : std_logic_vector(2 DOWNTO 0);
   SIGNAL imm4         : LC3b_imm4;
   SIGNAL imm5         : LC3b_imm5;
   SIGNAL index6       : LC3b_index6;
   SIGNAL offset11     : LC3b_offset11;
   SIGNAL offset9      : LC3b_offset9;
   SIGNAL s1000        : LC3b_word;
   SIGNAL s111         : std_logic_vector(2 DOWNTO 0);
   SIGNAL sextimm5     : LC3b_word;
   SIGNAL sextimm6     : LC3b_word;
   SIGNAL trapvec8     : LC3b_trapvect8;
   SIGNAL zextimm4     : LC3b_word;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      offset11 : IN     LC3b_offset11 ;
      ADJ11out : OUT    LC3b_word ;
      CLK      : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      CLK     : IN     std_logic ;
      index6  : IN     LC3b_index6 ;
      ADJ6out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      CLK     : IN     std_logic ;
      offset9 : IN     LC3b_offset9 ;
      ADJ9out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ALU
   PORT (
      ALUMUXout : IN     LC3b_word ;
      ALUop     : IN     LC3b_aluop ;
      CLK       : IN     std_logic ;
      RFAout    : IN     LC3b_word ;
      ALUout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT AdjTrapVec
   PORT (
      TrapAddr : OUT    LC3b_word ;
      trapvec8 : IN     LC3b_trapvect8 ;
      CLK      : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Eight
   PORT (
      CLK   : IN     std_logic ;
      s1000 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      CLK      : IN     std_logic ;
      RFMuxout : IN     LC3b_word ;
      GenCCout : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT IR
   PORT (
      LoadIR    : IN     std_logic ;
      MDRout    : IN     LC3b_word ;
      CLK       : IN     std_logic ;
      Opcode    : OUT    LC3b_opcode ;
      SrcA      : OUT    LC3b_reg ;
      SrcB      : OUT    std_logic_vector (2 DOWNTO 0);
      dest      : OUT    std_logic_vector (2 DOWNTO 0);
      index6    : OUT    LC3b_index6 ;
      imm5      : OUT    LC3b_imm5 ;
      bit5      : OUT    std_logic ;
      offset9   : OUT    LC3b_offset9 ;
      trapvec8  : OUT    LC3b_trapvect8 ;
      offset11  : OUT    LC3b_offset11 ;
      bit11     : OUT    std_logic ;
      imm4      : OUT    LC3b_imm4 ;
      direction : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LDBHighByte
   PORT (
      CLK       : IN     std_logic ;
      ZextHByte : OUT    LC3b_word ;
      MDRout    : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT LDBLowByte
   PORT (
      CLK       : IN     std_logic ;
      ZextLByte : OUT    LC3b_word ;
      MDRout    : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      CLK      : IN     std_logic ;
      GenCCout : IN     std_logic_vector (2 DOWNTO 0);
      LoadNZP  : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZPsplit
   PORT (
      CLK    : IN     std_logic ;
      CheckN : OUT    std_logic ;
      CheckP : OUT    std_logic ;
      CheckZ : OUT    std_logic ;
      dest   : IN     std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      PCout      : IN     LC3b_word ;
      CLK        : IN     std_logic ;
      PCPlus2out : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      clk    : IN     std_logic ;
      input  : IN     LC3b_word ;
      load   : IN     std_logic ;
      reset  : IN     std_logic ;
      output : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      RESET_L     : IN     std_logic ;
      RFMuxout    : IN     LC3b_word ;
      RegWrite    : IN     std_logic ;
      SrcB        : IN     std_logic_vector (2 DOWNTO 0);
      StoreMuxout : IN     std_logic_vector (2 DOWNTO 0);
      CLK         : IN     std_logic ;
      RFAout      : OUT    LC3b_word ;
      RFBout      : OUT    LC3b_word ;
      destmuxout  : IN     std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT SEXT5
   PORT (
      in5    : IN     LC3b_imm5;
      output : OUT    LC3b_word
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      CLK      : IN     std_logic ;
      index6   : IN     LC3b_index6 ;
      sextimm6 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StoreMux
   PORT (
      B      : IN     std_logic_vector (2 DOWNTO 0);
      sel    : IN     std_logic ;
      A      : IN     std_logic_vector (2 DOWNTO 0);
      Muxout : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      in0 : IN     LC3b_word ;
      in1 : IN     LC3b_word ;
      in2 : IN     LC3b_word ;
      in3 : IN     LC3b_word ;
      sel : IN     LC3b_4MUX_SEL ;
      Y   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      in0    : IN     lc3b_word ;
      in1    : IN     lc3b_word ;
      in2    : IN     lc3b_word ;
      in3    : IN     lc3b_word ;
      in4    : IN     lc3b_word ;
      in5    : IN     lc3b_word ;
      in6    : IN     lc3b_word ;
      in7    : IN     lc3b_word ;
      sel    : IN     lc3b_8Mux_sel ;
      output : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT4
   PORT (
      CLK      : IN     std_logic ;
      imm4     : IN     LC3b_imm4 ;
      zextimm4 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT adder
   PORT (
      A : IN     LC3b_word ;
      B : IN     LC3b_word ;
      S : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT r7
   PORT (
      CLK  : IN     std_logic ;
      s111 : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : ALU USE ENTITY ece411.ALU;
   FOR ALL : AdjTrapVec USE ENTITY ece411.AdjTrapVec;
   FOR ALL : Eight USE ENTITY ece411.Eight;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IR USE ENTITY ece411.IR;
   FOR ALL : LDBHighByte USE ENTITY ece411.LDBHighByte;
   FOR ALL : LDBLowByte USE ENTITY ece411.LDBLowByte;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : NZPsplit USE ENTITY ece411.NZPsplit;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : SEXT5 USE ENTITY ece411.SEXT5;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : StoreMux USE ENTITY ece411.StoreMux;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : ZEXT4 USE ENTITY ece411.ZEXT4;
   FOR ALL : adder USE ENTITY ece411.adder;
   FOR ALL : r7 USE ENTITY ece411.r7;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- Dataout = MDRout
   DATAOUT <= MDRout;                                       

   -- HDL Embedded Text Block 2 eb2
   -- connect AddrParity to Address(0)
   AddrParity <= Address(0);                                       


   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         offset11 => offset11,
         ADJ11out => ADJ11out,
         CLK      => CLK
      );
   aADJ6 : ADJ6
      PORT MAP (
         CLK     => CLK,
         index6  => index6,
         ADJ6out => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         CLK     => CLK,
         offset9 => offset9,
         ADJ9out => ADJ9out
      );
   aALU : ALU
      PORT MAP (
         ALUMUXout => ALUMUXout,
         ALUop     => ALUop,
         CLK       => CLK,
         RFAout    => RFAout,
         ALUout    => ALUout
      );
   aAdjTrapVec : AdjTrapVec
      PORT MAP (
         TrapAddr => TrapAddr,
         trapvec8 => trapvec8,
         CLK      => CLK
      );
   aEight : Eight
      PORT MAP (
         CLK   => CLK,
         s1000 => s1000
      );
   aGenCC : GenCC
      PORT MAP (
         CLK      => CLK,
         RFMuxout => RFMuxout,
         GenCCout => GenCCout
      );
   aIR : IR
      PORT MAP (
         LoadIR    => LoadIR,
         MDRout    => MDRout,
         CLK       => CLK,
         Opcode    => Opcode,
         SrcA      => SrcA,
         SrcB      => SrcB,
         dest      => dest,
         index6    => index6,
         imm5      => imm5,
         bit5      => bit5,
         offset9   => offset9,
         trapvec8  => trapvec8,
         offset11  => offset11,
         bit11     => bit11,
         imm4      => imm4,
         direction => direction
      );
   aLDBHighByte : LDBHighByte
      PORT MAP (
         CLK       => CLK,
         ZextHByte => ZextHByte,
         MDRout    => MDRout
      );
   aLDBLowByte : LDBLowByte
      PORT MAP (
         CLK       => CLK,
         ZextLByte => ZextLByte,
         MDRout    => MDRout
      );
   aNZP : NZP
      PORT MAP (
         CLK      => CLK,
         GenCCout => GenCCout,
         LoadNZP  => LoadNZP,
         n        => n,
         p        => p,
         z        => z
      );
   aNZPsplit : NZPsplit
      PORT MAP (
         CLK    => CLK,
         CheckN => CheckN,
         CheckP => CheckP,
         CheckZ => CheckZ,
         dest   => dest
      );
   aPlus2 : Plus2
      PORT MAP (
         PCout      => PCout,
         CLK        => CLK,
         PCPlus2out => PCPlus2out
      );
   MAR : Reg16
      PORT MAP (
         clk    => CLK,
         input  => MARMuxout,
         load   => LoadMAR,
         reset  => RESET_L,
         output => ADDRESS
      );
   MDR : Reg16
      PORT MAP (
         clk    => CLK,
         input  => MDRMuxout,
         load   => LoadMDR,
         reset  => RESET_L,
         output => MDRout
      );
   PC : Reg16
      PORT MAP (
         clk    => CLK,
         input  => PCMuxout,
         load   => LoadPC,
         reset  => RESET_L,
         output => PCout
      );
   aRegFile : RegFile
      PORT MAP (
         RESET_L     => RESET_L,
         RFMuxout    => RFMuxout,
         RegWrite    => RegWrite,
         SrcB        => SrcB,
         StoreMuxout => StoreMuxout,
         CLK         => CLK,
         RFAout      => RFAout,
         RFBout      => RFBout,
         destmuxout  => destmuxout
      );
   aSEXT5 : SEXT5
      PORT MAP (
         in5    => imm5,
         output => sextimm5
      );
   aSEXT6 : SEXT6
      PORT MAP (
         CLK      => CLK,
         index6   => index6,
         sextimm6 => sextimm6
      );
   aDestMux : StoreMux
      PORT MAP (
         B      => dest,
         sel    => DestSel,
         A      => s111,
         Muxout => destmuxout
      );
   aStoreMux : StoreMux
      PORT MAP (
         B      => SrcA,
         sel    => StoreSR,
         A      => dest,
         Muxout => StoreMuxout
      );
   ALUSubMux : WordMux2
      PORT MAP (
         A   => ADJ6out,
         B   => sextimm6,
         Sel => ALUSubMuxSel,
         F   => alusubmuxout
      );
   MDRMux : WordMux2
      PORT MAP (
         A   => DATAIN,
         B   => ALUout,
         Sel => MDRMuxSel,
         F   => MDRMuxout
      );
   PCSubMux : WordMux2
      PORT MAP (
         A   => RFAout,
         B   => JSRaddout,
         Sel => bit11,
         F   => PCSubMuxOut
      );
   ShiftMux : WordMux2
      PORT MAP (
         A   => s1000,
         B   => zextimm4,
         Sel => ShiftSel,
         F   => ShiftAmount
      );
   ALUMux : WordMux4
      PORT MAP (
         in0 => RFBout,
         in1 => alusubmuxout,
         in2 => sextimm5,
         in3 => ShiftAmount,
         sel => ALUMuxSel,
         Y   => ALUMUXout
      );
   MarMux : WordMux4
      PORT MAP (
         in0 => PCout,
         in1 => ALUout,
         in2 => MDRout,
         in3 => TrapAddr,
         sel => MARMuxSel,
         Y   => MARMuxout
      );
   PCMux : WordMux4
      PORT MAP (
         in0 => PCPlus2out,
         in1 => BRaddout,
         in2 => MDRout,
         in3 => PCSubMuxOut,
         sel => PCMuxSel,
         Y   => PCMuxout
      );
   RFMux : WordMux8
      PORT MAP (
         in0    => MDRout,
         in1    => ALUout,
         in2    => BRaddout,
         in3    => PCout,
         in4    => ZextLByte,
         in5    => ZextHByte,
         in6    => ALUout,
         in7    => ALUout,
         sel    => RFMuxSel,
         output => RFMuxout
      );
   aZEXT4 : ZEXT4
      PORT MAP (
         CLK      => CLK,
         imm4     => imm4,
         zextimm4 => zextimm4
      );
   aBRadd : adder
      PORT MAP (
         A => PCout,
         B => ADJ9out,
         S => BRaddout
      );
   aJSRadd : adder
      PORT MAP (
         A => PCout,
         B => ADJ11out,
         S => JSRaddout
      );
   a111 : r7
      PORT MAP (
         CLK  => CLK,
         s111 => s111
      );

END struct;
