-- VHDL Entity ece411.Datapath.interface
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      CLK              : IN     std_logic;
      RESET_L          : IN     STD_LOGIC;
      data_in          : IN     LC3B_OWORD;
      data_resp_h      : IN     std_logic;
      instr_in         : IN     LC3B_OWORD;
      instr_resp_h     : IN     std_logic;
      data_mread_l     : OUT    std_logic;
      data_mwrite_l    : OUT    STD_LOGIC;
      data_pm_addr     : OUT    LC3B_WORD;
      data_pm_dataout  : OUT    LC3B_OWORD;
      instr_mread_l    : OUT    std_logic;
      instr_mwrite_l   : OUT    STD_LOGIC;
      instr_pm_addr    : OUT    LC3b_word;
      instr_pm_dataout : OUT    lc3b_oword
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL btb_pc                     : lc3b_word;
   SIGNAL btb_taken                  : std_logic;
   SIGNAL btb_target_pc              : LC3b_word;
   SIGNAL btb_unconditional          : std_logic;
   SIGNAL btb_write                  : std_logic;
   SIGNAL cc                         : LC3b_cc;
   SIGNAL dcache_ReadIndex           : LC3b_C_INDEX;
   SIGNAL dcache_feedback            : LC3b_cache_feedback_data;
   SIGNAL dcache_interstage_data_in  : LC3b_cache_interstage_data;
   SIGNAL dcache_interstage_data_out : LC3b_cache_interstage_data;
   SIGNAL decode_btb_state           : btb_line;
   SIGNAL decode_conditional         : std_logic;
   SIGNAL decode_control_out         : control_word;
   SIGNAL decode_data_in             : pipe_data;
   SIGNAL decode_data_out            : pipe_data;
   SIGNAL decode_flush               : std_logic;
   SIGNAL decode_flush_l             : std_logic;
   SIGNAL decode_insert_bubble       : std_logic;
   SIGNAL decode_load_pc             : std_logic;
   SIGNAL decode_pc                  : lc3b_word;
   SIGNAL decode_prediction_correct  : STD_LOGIC;
   SIGNAL decode_taken               : std_logic;
   SIGNAL decode_target_pc           : lc3b_word;
   SIGNAL decode_uop_control_out     : control_word;
   SIGNAL decode_uop_data_out        : pipe_data;
   SIGNAL exec_btb_state             : btb_line;
   SIGNAL exec_conditional           : control_word;
   SIGNAL exec_control               : control_word;
   SIGNAL exec_control_buffer        : exec_control_word;
   SIGNAL exec_control_in            : exec_control_word;
   SIGNAL exec_data_in               : pipe_data;
   SIGNAL exec_data_out              : pipe_data;
   SIGNAL exec_flush                 : std_logic;
   SIGNAL exec_flush_l               : std_logic;
   SIGNAL exec_forward_addr_sel      : STD_LOGIC;
   SIGNAL exec_forward_cc_sel        : LC3b_TRISTATE_4mux_sel;
   SIGNAL exec_forward_srca_sel      : LC3b_TRISTATE_4mux_sel;
   SIGNAL exec_forward_srcb_sel      : LC3b_TRISTATE_4mux_sel;
   SIGNAL exec_fw_addr_sel           : std_logic;
   SIGNAL exec_fw_cc_sel             : LC3b_TRISTATE_4mux_sel;
   SIGNAL exec_fw_src1_sel           : LC3b_TRISTATE_4mux_sel;
   SIGNAL exec_fw_src2_sel           : LC3b_TRISTATE_4mux_sel;
   SIGNAL exec_insert_bubble         : LC3B_TRISTATE_2MUX_SEL;
   SIGNAL exec_load_pc               : std_logic;
   SIGNAL exec_pc                    : lc3b_word;
   SIGNAL exec_prediction_correct    : std_logic;
   SIGNAL exec_taken                 : std_logic;
   SIGNAL exec_target_pc             : LC3b_word;
   SIGNAL fetch1_data_out            : pipe_data;
   SIGNAL fetch2_data_in             : pipe_data;
   SIGNAL fetch2_data_out            : pipe_data;
   SIGNAL fetch2_flush               : std_logic;
   SIGNAL fetch2_flush_l             : std_logic;
   SIGNAL fetch2_insert_bubble       : std_logic;
   SIGNAL fetch_ready                : std_logic;
   SIGNAL icache_ReadIndex           : lc3b_c_index;
   SIGNAL icache_feedback            : LC3b_cache_feedback_data;
   SIGNAL icache_interstage_data_in  : LC3b_cache_interstage_data;
   SIGNAL icache_interstage_data_out : LC3b_cache_interstage_data;
   SIGNAL instr_addr                 : LC3b_word;
   SIGNAL load_dcache_fwd_pipe       : std_logic;
   SIGNAL load_decode_exec_pipe      : STD_LOGIC;
   SIGNAL load_exec_mem1_pipe        : STD_LOGIC;
   SIGNAL load_fetch1_fetch2_pipe    : STD_LOGIC;
   SIGNAL load_fetch_decode_pipe     : STD_LOGIC;
   SIGNAL load_fwd_pipe              : std_logic;
   SIGNAL load_icache_fwd_pipe       : std_logic;
   SIGNAL load_mem1_mem2_pipe        : std_logic;
   SIGNAL load_mem2_wb_pipe          : std_logic;
   SIGNAL load_pc                    : std_logic;
   SIGNAL load_uarch_pipe            : std_logic;
   SIGNAL mem1_cc                    : LC3b_CC;
   SIGNAL mem1_control               : control_word;
   SIGNAL mem1_control_in            : mem_control_word;
   SIGNAL mem1_data_in               : pipe_data;
   SIGNAL mem1_data_out              : pipe_data;
   SIGNAL mem1_flush                 : std_logic;
   SIGNAL mem1_flush_l               : std_logic;
   SIGNAL mem1_insert_bubble         : LC3B_TRISTATE_2MUX_SEL;
   SIGNAL mem1_sr1_forward_sel       : STD_LOGIC_VECTOR(1 DOWNTO 0);
   SIGNAL mem1_sr1_fw_sel            : LC3b_TRISTATE_2MUX_SEL;
   SIGNAL mem1_sr2_forward_sel       : STD_LOGIC_VECTOR(1 DOWNTO 0);
   SIGNAL mem1_sr2_fw_sel            : LC3b_TRISTATE_2MUX_SEL;
   SIGNAL mem2_cc                    : lc3b_cc;
   SIGNAL mem2_control               : control_word;
   SIGNAL mem2_control_in            : mem_control_word;
   SIGNAL mem2_data_in               : pipe_data;
   SIGNAL mem2_data_out              : pipe_data;
   SIGNAL mem2_flush                 : STD_LOGIC;
   SIGNAL mem2_flush_l               : STD_LOGIC;
   SIGNAL mem2_foward_sel            : std_logic;
   SIGNAL mem2_fw_sel                : std_logic;
   SIGNAL mem2_insert_bubble         : LC3B_TRISTATE_2MUX_SEL;
   SIGNAL mem2_pc                    : lc3b_word;
   SIGNAL mem_btb_state              : btb_line;
   SIGNAL mem_conditional            : std_logic;
   SIGNAL mem_load_pc                : STD_LOGIC;
   SIGNAL mem_prediction_correct     : std_logic;
   SIGNAL mem_ready                  : STD_LOGIC;
   SIGNAL mem_taken                  : std_logic;
   SIGNAL mem_target_pc              : lc3b_word;
   SIGNAL read_instr                 : std_logic;
   SIGNAL stall_load_use_1cycle      : STD_LOGIC;
   SIGNAL stall_load_use_2cycle      : STD_LOGIC;
   SIGNAL stall_load_use_buffer      : STD_LOGIC;
   SIGNAL stall_load_use_buffer_l    : STD_LOGIC;
   SIGNAL target_pc_mux_sel          : LC3B_TRISTATE_4mux_sel;
   SIGNAL uarch_control_in           : control_word;
   SIGNAL uarch_control_out          : control_word;
   SIGNAL uarch_data_in              : pipe_data;
   SIGNAL uarch_data_out             : pipe_data;
   SIGNAL uarch_flush                : std_logic;
   SIGNAL uarch_flush_l              : std_logic;
   SIGNAL uarch_insert_bubble        : std_logic;
   SIGNAL uarch_sel_in               : STD_LOGIC;
   SIGNAL uarch_sel_out              : STD_LOGIC;
   SIGNAL uarch_stall_in             : std_logic;
   SIGNAL uarch_stall_in_buffer      : std_logic;
   SIGNAL uop_instr_dr               : LC3b_reg;
   SIGNAL uop_sr2                    : LC3b_reg;
   SIGNAL uop_sr2_val                : lc3b_word;
   SIGNAL wb_cc                      : LC3b_cc;
   SIGNAL wb_control_in              : wb_control_word;
   SIGNAL wb_data_in                 : pipe_data;
   SIGNAL wb_dest                    : LC3B_REG;
   SIGNAL wb_din                     : LC3B_WORD;
   SIGNAL wb_load_cc                 : std_logic;
   SIGNAL wb_rw                      : STD_LOGIC;


   -- Component Declarations
   COMPONENT StallUnit
   PORT (
      CLK                     : IN     std_logic ;
      fetch_ready             : IN     std_logic ;
      mem_ready               : IN     STD_LOGIC ;
      stall_load_use_buffer_l : IN     STD_LOGIC ;
      uarch_stall_in_buffer   : IN     std_logic ;
      load_dcache_fwd_pipe    : OUT    std_logic ;
      load_decode_exec_pipe   : OUT    STD_LOGIC ;
      load_exec_mem1_pipe     : OUT    STD_LOGIC ;
      load_fetch1_fetch2_pipe : OUT    STD_LOGIC ;
      load_fetch_decode_pipe  : OUT    STD_LOGIC ;
      load_fwd_pipe           : OUT    std_logic ;
      load_icache_fwd_pipe    : OUT    std_logic ;
      load_mem1_mem2_pipe     : OUT    std_logic ;
      load_mem2_wb_pipe       : OUT    std_logic ;
      load_pc                 : OUT    std_logic ;
      load_uarch_pipe         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT bubbleUnit
   PORT (
      CLK                   : IN     std_logic ;
      decode_flush          : IN     std_logic ;
      decode_flush_l        : IN     std_logic ;
      exec_flush            : IN     std_logic ;
      exec_flush_l          : IN     std_logic ;
      fetch2_flush          : IN     std_logic ;
      fetch2_flush_l        : IN     std_logic ;
      mem1_flush            : IN     std_logic ;
      mem1_flush_l          : IN     std_logic ;
      mem2_flush            : IN     STD_LOGIC ;
      mem2_flush_l          : IN     STD_LOGIC ;
      stall_load_use_buffer : IN     STD_LOGIC ;
      uarch_flush           : IN     std_logic ;
      uarch_flush_l         : IN     std_logic ;
      decode_insert_bubble  : OUT    std_logic ;
      exec_insert_bubble    : OUT    LC3B_TRISTATE_2MUX_SEL ;
      fetch2_insert_bubble  : OUT    std_logic ;
      mem1_insert_bubble    : OUT    LC3B_TRISTATE_2MUX_SEL ;
      mem2_insert_bubble    : OUT    LC3B_TRISTATE_2MUX_SEL ;
      uarch_insert_bubble   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT decodeStage
   PORT (
      CLK                : IN     std_logic ;
      RESET_L            : IN     STD_LOGIC ;
      decode_data_in     : IN     pipe_data ;
      wb_cc              : IN     LC3b_cc ;
      wb_dest            : IN     LC3B_REG ;
      wb_din             : IN     LC3B_WORD ;
      wb_load_cc         : IN     std_logic ;
      wb_rw              : IN     STD_LOGIC ;
      decode_btb_state   : OUT    btb_line ;
      decode_conditional : OUT    std_logic ;
      decode_control_out : OUT    control_word ;
      decode_data_out    : OUT    pipe_data ;
      decode_load_pc     : OUT    std_logic ;
      decode_pc          : OUT    lc3b_word ;
      decode_taken       : OUT    std_logic ;
      decode_target_pc   : OUT    lc3b_word ;
      uop_instr_dr       : OUT    LC3b_reg ;
      uop_sr2            : OUT    LC3b_reg ;
      uop_sr2_val        : OUT    lc3b_word ;
      cc                 : BUFFER LC3b_cc 
   );
   END COMPONENT;
   COMPONENT decode_exec_pipe
   PORT (
      CLK                    : IN     std_logic ;
      RESET_L                : IN     STD_LOGIC ;
      decode_uop_control_out : IN     control_word ;
      decode_uop_data_out    : IN     pipe_data ;
      exec_insert_bubble     : IN     LC3B_TRISTATE_2MUX_SEL ;
      load_decode_exec_pipe  : IN     STD_LOGIC ;
      exec_control           : OUT    control_word ;
      exec_control_in        : OUT    exec_control_word ;
      exec_data_in           : OUT    pipe_data 
   );
   END COMPONENT;
   COMPONENT execStage
   PORT (
      CLK                   : IN     std_logic ;
      cc                    : IN     LC3b_cc ;
      exec_control_in       : IN     exec_control_word ;
      exec_data_in          : IN     pipe_data ;
      exec_forward_addr_sel : IN     STD_LOGIC ;
      exec_forward_cc_sel   : IN     LC3b_TRISTATE_4mux_sel ;
      exec_forward_srca_sel : IN     LC3b_TRISTATE_4mux_sel ;
      exec_forward_srcb_sel : IN     LC3b_TRISTATE_4mux_sel ;
      mem1_cc               : IN     LC3b_CC ;
      mem1_data_in          : IN     pipe_data ;
      mem2_cc               : IN     lc3b_cc ;
      mem2_data_in          : IN     pipe_data ;
      mem2_data_out         : IN     pipe_data ;
      wb_data_in            : IN     pipe_data ;
      exec_btb_state        : OUT    btb_line ;
      exec_conditional      : OUT    control_word ;
      exec_control_buffer   : OUT    exec_control_word ;
      exec_data_out         : OUT    pipe_data ;
      exec_load_pc          : OUT    std_logic ;
      exec_pc               : OUT    lc3b_word ;
      exec_taken            : OUT    std_logic ;
      exec_target_pc        : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT exec_mem1_pipe
   PORT (
      CLK                 : IN     std_logic ;
      RESET_L             : IN     STD_LOGIC ;
      exec_control        : IN     control_word ;
      exec_data_out       : IN     pipe_data ;
      load_exec_mem1_pipe : IN     STD_LOGIC ;
      mem1_insert_bubble  : IN     LC3B_TRISTATE_2MUX_SEL ;
      mem1_control        : OUT    control_word ;
      mem1_control_in     : OUT    mem_control_word ;
      mem1_data_in        : OUT    pipe_data 
   );
   END COMPONENT;
   COMPONENT fetch1_fetch2_pipe
   PORT (
      CLK                        : IN     std_logic ;
      RESET_L                    : IN     STD_LOGIC ;
      fetch1_data_out            : IN     pipe_data ;
      fetch2_insert_bubble       : IN     std_logic ;
      icache_interstage_data_in  : IN     LC3b_cache_interstage_data ;
      load_fetch1_fetch2_pipe    : IN     STD_LOGIC ;
      fetch2_data_in             : OUT    pipe_data ;
      icache_interstage_data_out : OUT    LC3b_cache_interstage_data ;
      read_instr                 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT fetchStage1
   PORT (
      CLK                       : IN     std_logic ;
      RESET_L                   : IN     STD_LOGIC ;
      btb_pc                    : IN     lc3b_word ;
      btb_taken                 : IN     std_logic ;
      btb_target_pc             : IN     LC3b_word ;
      btb_unconditional         : IN     std_logic ;
      btb_write                 : IN     std_logic ;
      decode_btb_state          : IN     btb_line ;
      decode_conditional        : IN     std_logic ;
      decode_load_pc            : IN     std_logic ;
      decode_pc                 : IN     lc3b_word ;
      decode_prediction_correct : IN     STD_LOGIC ;
      decode_taken              : IN     std_logic ;
      decode_target_pc          : IN     lc3b_word ;
      exec_btb_state            : IN     btb_line ;
      exec_conditional          : IN     control_word ;
      exec_control_buffer       : IN     exec_control_word ;
      exec_load_pc              : IN     std_logic ;
      exec_pc                   : IN     lc3b_word ;
      exec_prediction_correct   : IN     std_logic ;
      exec_taken                : IN     std_logic ;
      exec_target_pc            : IN     LC3b_word ;
      icache_feedback           : IN     LC3b_cache_feedback_data ;
      load_pc                   : IN     std_logic ;
      mem2_pc                   : IN     lc3b_word ;
      mem_btb_state             : IN     btb_line ;
      mem_conditional           : IN     std_logic ;
      mem_load_pc               : IN     STD_LOGIC ;
      mem_prediction_correct    : IN     std_logic ;
      mem_taken                 : IN     std_logic ;
      mem_target_pc             : IN     lc3b_word ;
      target_pc_mux_sel         : IN     LC3B_tristate_4mux_sel ;
      wb_cc                     : IN     LC3b_cc ;
      fetch1_data_out           : OUT    pipe_data ;
      icache_ReadIndex          : OUT    lc3b_c_index ;
      icache_interstage_data_in : OUT    LC3b_cache_interstage_data 
   );
   END COMPONENT;
   COMPONENT fetchStage2
   PORT (
      CLK                        : IN     std_logic ;
      RESET_L                    : IN     STD_LOGIC ;
      decode_insert_bubble       : IN     std_logic ;
      fetch2_data_in             : IN     pipe_data ;
      icache_ReadIndex           : IN     lc3b_c_index ;
      icache_interstage_data_out : IN     LC3b_cache_interstage_data ;
      instr_in                   : IN     LC3B_OWORD ;
      instr_resp_h               : IN     std_logic ;
      load_icache_fwd_pipe       : IN     std_logic ;
      read_instr                 : IN     std_logic ;
      fetch2_data_out            : OUT    pipe_data ;
      fetch_ready                : OUT    std_logic ;
      icache_feedback            : OUT    LC3b_cache_feedback_data ;
      instr_mread_l              : OUT    std_logic ;
      instr_mwrite_l             : OUT    STD_LOGIC ;
      instr_pm_addr              : OUT    LC3b_word ;
      instr_pm_dataout           : OUT    lc3b_oword ;
      instr_addr                 : BUFFER LC3b_word 
   );
   END COMPONENT;
   COMPONENT fetch_decode_pipe
   PORT (
      CLK                    : IN     std_logic ;
      RESET_L                : IN     STD_LOGIC ;
      fetch2_data_out        : IN     pipe_data ;
      load_fetch_decode_pipe : IN     STD_LOGIC ;
      decode_data_in         : OUT    pipe_data 
   );
   END COMPONENT;
   COMPONENT flushUnit
   PORT (
      CLK                       : IN     std_logic ;
      btb_pc                    : IN     lc3b_word ;
      btb_taken                 : IN     std_logic ;
      btb_target_pc             : IN     LC3b_word ;
      btb_unconditional         : IN     std_logic ;
      btb_write                 : IN     std_logic ;
      decode_btb_state          : IN     btb_line ;
      decode_conditional        : IN     std_logic ;
      decode_load_pc            : IN     std_logic ;
      decode_pc                 : IN     lc3b_word ;
      decode_taken              : IN     std_logic ;
      decode_target_pc          : IN     lc3b_word ;
      exec_btb_state            : IN     btb_line ;
      exec_conditional          : IN     control_word ;
      exec_control_buffer       : IN     exec_control_word ;
      exec_load_pc              : IN     std_logic ;
      exec_pc                   : IN     lc3b_word ;
      exec_taken                : IN     std_logic ;
      exec_target_pc            : IN     LC3b_word ;
      instr_addr                : IN     LC3b_word ;
      mem2_pc                   : IN     lc3b_word ;
      mem_btb_state             : IN     btb_line ;
      mem_conditional           : IN     std_logic ;
      mem_load_pc               : IN     STD_LOGIC ;
      mem_taken                 : IN     std_logic ;
      mem_target_pc             : IN     lc3b_word ;
      wb_cc                     : IN     LC3b_cc ;
      decode_flush              : OUT    std_logic ;
      decode_flush_l            : OUT    std_logic ;
      decode_prediction_correct : OUT    STD_LOGIC ;
      exec_flush                : OUT    std_logic ;
      exec_flush_l              : OUT    std_logic ;
      exec_prediction_correct   : OUT    std_logic ;
      fetch2_flush              : OUT    std_logic ;
      fetch2_flush_l            : OUT    std_logic ;
      mem1_flush                : OUT    std_logic ;
      mem1_flush_l              : OUT    std_logic ;
      mem2_flush                : OUT    STD_LOGIC ;
      mem2_flush_l              : OUT    STD_LOGIC ;
      mem_prediction_correct    : OUT    std_logic ;
      target_pc_mux_sel         : OUT    LC3B_TRISTATE_4mux_sel ;
      uarch_flush               : OUT    std_logic ;
      uarch_flush_l             : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT forward_pipe
   PORT (
      CLK                     : IN     std_logic ;
      RESET_L                 : IN     STD_LOGIC ;
      exec_fw_addr_sel        : IN     std_logic ;
      exec_fw_cc_sel          : IN     LC3b_TRISTATE_4mux_sel ;
      exec_fw_src1_sel        : IN     LC3b_TRISTATE_4mux_sel ;
      exec_fw_src2_sel        : IN     LC3b_TRISTATE_4mux_sel ;
      load_fwd_pipe           : IN     std_logic ;
      mem1_sr1_forward_sel    : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      mem1_sr2_forward_sel    : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      mem2_fw_sel             : IN     std_logic ;
      stall_load_use_1cycle   : IN     STD_LOGIC ;
      stall_load_use_2cycle   : IN     STD_LOGIC ;
      exec_forward_addr_sel   : OUT    STD_LOGIC ;
      exec_forward_cc_sel     : OUT    LC3b_TRISTATE_4mux_sel ;
      exec_forward_srca_sel   : OUT    LC3b_TRISTATE_4mux_sel ;
      exec_forward_srcb_sel   : OUT    LC3b_TRISTATE_4mux_sel ;
      mem1_sr1_fw_sel         : OUT    LC3b_TRISTATE_2MUX_SEL ;
      mem1_sr2_fw_sel         : OUT    LC3b_TRISTATE_2MUX_SEL ;
      mem2_foward_sel         : OUT    std_logic ;
      stall_load_use_buffer   : OUT    STD_LOGIC ;
      stall_load_use_buffer_l : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT forwardingUnit
   PORT (
      CLK                    : IN     std_logic ;
      decode_uop_control_out : IN     control_word ;
      decode_uop_data_out    : IN     pipe_data ;
      exec_control           : IN     control_word ;
      exec_data_in           : IN     pipe_data ;
      mem1_control           : IN     control_word ;
      mem1_data_in           : IN     pipe_data ;
      mem2_control           : IN     control_word ;
      mem2_data_in           : IN     pipe_data ;
      exec_fw_addr_sel       : OUT    std_logic ;
      exec_fw_cc_sel         : OUT    LC3b_TRISTATE_4mux_sel ;
      exec_fw_src1_sel       : OUT    LC3b_TRISTATE_4mux_sel ;
      exec_fw_src2_sel       : OUT    LC3b_TRISTATE_4mux_sel ;
      mem1_sr1_forward_sel   : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      mem1_sr2_forward_sel   : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      mem2_fw_sel            : OUT    std_logic ;
      stall_load_use_1cycle  : OUT    STD_LOGIC ;
      stall_load_use_2cycle  : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT mem1_mem2_pipe
   PORT (
      CLK                        : IN     std_logic ;
      RESET_L                    : IN     STD_LOGIC ;
      dcache_interstage_data_in  : IN     LC3b_cache_interstage_data ;
      load_mem1_mem2_pipe        : IN     std_logic ;
      mem1_control               : IN     control_word ;
      mem1_data_out              : IN     pipe_data ;
      mem2_insert_bubble         : IN     LC3B_TRISTATE_2MUX_SEL ;
      dcache_interstage_data_out : OUT    LC3b_cache_interstage_data ;
      mem2_control               : OUT    control_word ;
      mem2_control_in            : OUT    mem_control_word ;
      mem2_data_in               : OUT    pipe_data ;
      wb_control_in              : OUT    wb_control_word 
   );
   END COMPONENT;
   COMPONENT mem2_wb_pipe
   PORT (
      CLK               : IN     std_logic ;
      RESET_L           : IN     STD_LOGIC ;
      load_mem2_wb_pipe : IN     std_logic ;
      mem2_control      : IN     control_word ;
      mem2_data_out     : IN     pipe_data ;
      wb_data_in        : OUT    pipe_data 
   );
   END COMPONENT;
   COMPONENT memStage1
   PORT (
      CLK                       : IN     std_logic ;
      RESET_L                   : IN     STD_LOGIC ;
      dcache_feedback           : IN     LC3b_cache_feedback_data ;
      mem1_control_in           : IN     mem_control_word ;
      mem1_data_in              : IN     pipe_data ;
      mem1_sr1_fw_sel           : IN     LC3b_TRISTATE_2MUX_SEL ;
      mem1_sr2_fw_sel           : IN     LC3b_TRISTATE_2MUX_SEL ;
      wb_data_in                : IN     pipe_data ;
      dcache_ReadIndex          : OUT    LC3b_C_INDEX ;
      dcache_interstage_data_in : OUT    LC3b_cache_interstage_data ;
      mem1_cc                   : OUT    LC3b_CC ;
      mem1_data_out             : OUT    pipe_data 
   );
   END COMPONENT;
   COMPONENT memStage2
   PORT (
      CLK                        : IN     std_logic ;
      RESET_L                    : IN     STD_LOGIC ;
      data_in                    : IN     LC3B_OWORD ;
      data_resp_h                : IN     std_logic ;
      dcache_ReadIndex           : IN     LC3b_C_INDEX ;
      dcache_interstage_data_out : IN     LC3b_cache_interstage_data ;
      load_dcache_fwd_pipe       : IN     std_logic ;
      mem2_control_in            : IN     mem_control_word ;
      mem2_data_in               : IN     pipe_data ;
      mem2_foward_sel            : IN     std_logic ;
      wb_control_in              : IN     wb_control_word ;
      wb_data_in                 : IN     pipe_data ;
      btb_pc                     : OUT    lc3b_word ;
      btb_taken                  : OUT    std_logic ;
      btb_target_pc              : OUT    LC3b_word ;
      btb_unconditional          : OUT    std_logic ;
      btb_write                  : OUT    std_logic ;
      data_mread_l               : OUT    std_logic ;
      data_mwrite_l              : OUT    STD_LOGIC ;
      data_pm_addr               : OUT    LC3B_WORD ;
      data_pm_dataout            : OUT    LC3B_OWORD ;
      dcache_feedback            : OUT    LC3b_cache_feedback_data ;
      mem2_cc                    : OUT    lc3b_cc ;
      mem2_data_out              : OUT    pipe_data ;
      mem2_pc                    : OUT    lc3b_word ;
      mem_btb_state              : OUT    btb_line ;
      mem_conditional            : OUT    std_logic ;
      mem_load_pc                : OUT    STD_LOGIC ;
      mem_ready                  : OUT    STD_LOGIC ;
      mem_taken                  : OUT    std_logic ;
      mem_target_pc              : OUT    lc3b_word ;
      wb_cc                      : OUT    LC3b_cc ;
      wb_dest                    : OUT    LC3B_REG ;
      wb_din                     : OUT    LC3B_WORD ;
      wb_load_cc                 : OUT    std_logic ;
      wb_rw                      : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT uarch
   PORT (
      CLK                   : IN     std_logic ;
      decode_control_out    : IN     control_word ;
      decode_data_out       : IN     pipe_data ;
      uarch_stall_in        : IN     std_logic ;
      uop_instr_dr          : IN     LC3b_reg ;
      uop_sr2               : IN     LC3b_reg ;
      uop_sr2_val           : IN     lc3b_word ;
      uarch_control_out     : OUT    control_word ;
      uarch_data_out        : OUT    pipe_data ;
      uarch_sel_out         : OUT    STD_LOGIC ;
      uarch_stall_in_buffer : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT uarch_pipe
   PORT (
      CLK                   : IN     std_logic ;
      RESET_L               : IN     STD_LOGIC ;
      load_uarch_pipe       : IN     std_logic ;
      uarch_control_out     : IN     control_word ;
      uarch_data_out        : IN     pipe_data ;
      uarch_insert_bubble   : IN     std_logic ;
      uarch_sel_out         : IN     STD_LOGIC ;
      uarch_stall_in_buffer : IN     std_logic ;
      uarch_control_in      : OUT    control_word ;
      uarch_data_in         : OUT    pipe_data ;
      uarch_sel_in          : OUT    STD_LOGIC ;
      uarch_stall_in        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT uop_mux
   PORT (
      CLK                    : IN     std_logic ;
      decode_control_out     : IN     control_word ;
      decode_data_out        : IN     pipe_data ;
      uarch_control_in       : IN     control_word ;
      uarch_data_in          : IN     pipe_data ;
      uarch_sel_in           : IN     STD_LOGIC ;
      decode_uop_control_out : OUT    control_word ;
      decode_uop_data_out    : OUT    pipe_data 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : StallUnit USE ENTITY ece411.StallUnit;
   FOR ALL : bubbleUnit USE ENTITY ece411.bubbleUnit;
   FOR ALL : decodeStage USE ENTITY ece411.decodeStage;
   FOR ALL : decode_exec_pipe USE ENTITY ece411.decode_exec_pipe;
   FOR ALL : execStage USE ENTITY ece411.execStage;
   FOR ALL : exec_mem1_pipe USE ENTITY ece411.exec_mem1_pipe;
   FOR ALL : fetch1_fetch2_pipe USE ENTITY ece411.fetch1_fetch2_pipe;
   FOR ALL : fetchStage1 USE ENTITY ece411.fetchStage1;
   FOR ALL : fetchStage2 USE ENTITY ece411.fetchStage2;
   FOR ALL : fetch_decode_pipe USE ENTITY ece411.fetch_decode_pipe;
   FOR ALL : flushUnit USE ENTITY ece411.flushUnit;
   FOR ALL : forward_pipe USE ENTITY ece411.forward_pipe;
   FOR ALL : forwardingUnit USE ENTITY ece411.forwardingUnit;
   FOR ALL : mem1_mem2_pipe USE ENTITY ece411.mem1_mem2_pipe;
   FOR ALL : mem2_wb_pipe USE ENTITY ece411.mem2_wb_pipe;
   FOR ALL : memStage1 USE ENTITY ece411.memStage1;
   FOR ALL : memStage2 USE ENTITY ece411.memStage2;
   FOR ALL : uarch USE ENTITY ece411.uarch;
   FOR ALL : uarch_pipe USE ENTITY ece411.uarch_pipe;
   FOR ALL : uop_mux USE ENTITY ece411.uop_mux;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   aStall : StallUnit
      PORT MAP (
         CLK                     => CLK,
         fetch_ready             => fetch_ready,
         mem_ready               => mem_ready,
         stall_load_use_buffer_l => stall_load_use_buffer_l,
         uarch_stall_in_buffer   => uarch_stall_in_buffer,
         load_dcache_fwd_pipe    => load_dcache_fwd_pipe,
         load_decode_exec_pipe   => load_decode_exec_pipe,
         load_exec_mem1_pipe     => load_exec_mem1_pipe,
         load_fetch1_fetch2_pipe => load_fetch1_fetch2_pipe,
         load_fetch_decode_pipe  => load_fetch_decode_pipe,
         load_fwd_pipe           => load_fwd_pipe,
         load_icache_fwd_pipe    => load_icache_fwd_pipe,
         load_mem1_mem2_pipe     => load_mem1_mem2_pipe,
         load_mem2_wb_pipe       => load_mem2_wb_pipe,
         load_pc                 => load_pc,
         load_uarch_pipe         => load_uarch_pipe
      );
   bubbleBath : bubbleUnit
      PORT MAP (
         CLK                   => CLK,
         decode_flush          => decode_flush,
         decode_flush_l        => decode_flush_l,
         exec_flush            => exec_flush,
         exec_flush_l          => exec_flush_l,
         fetch2_flush          => fetch2_flush,
         fetch2_flush_l        => fetch2_flush_l,
         mem1_flush            => mem1_flush,
         mem1_flush_l          => mem1_flush_l,
         mem2_flush            => mem2_flush,
         mem2_flush_l          => mem2_flush_l,
         stall_load_use_buffer => stall_load_use_buffer,
         uarch_flush           => uarch_flush,
         uarch_flush_l         => uarch_flush_l,
         decode_insert_bubble  => decode_insert_bubble,
         exec_insert_bubble    => exec_insert_bubble,
         fetch2_insert_bubble  => fetch2_insert_bubble,
         mem1_insert_bubble    => mem1_insert_bubble,
         mem2_insert_bubble    => mem2_insert_bubble,
         uarch_insert_bubble   => uarch_insert_bubble
      );
   decode : decodeStage
      PORT MAP (
         CLK                => CLK,
         RESET_L            => RESET_L,
         decode_data_in     => decode_data_in,
         wb_cc              => wb_cc,
         wb_dest            => wb_dest,
         wb_din             => wb_din,
         wb_load_cc         => wb_load_cc,
         wb_rw              => wb_rw,
         decode_btb_state   => decode_btb_state,
         decode_conditional => decode_conditional,
         decode_control_out => decode_control_out,
         decode_data_out    => decode_data_out,
         decode_load_pc     => decode_load_pc,
         decode_pc          => decode_pc,
         decode_taken       => decode_taken,
         decode_target_pc   => decode_target_pc,
         uop_instr_dr       => uop_instr_dr,
         uop_sr2            => uop_sr2,
         uop_sr2_val        => uop_sr2_val,
         cc                 => cc
      );
   pipe2_de : decode_exec_pipe
      PORT MAP (
         CLK                    => CLK,
         RESET_L                => RESET_L,
         decode_uop_control_out => decode_uop_control_out,
         decode_uop_data_out    => decode_uop_data_out,
         exec_insert_bubble     => exec_insert_bubble,
         load_decode_exec_pipe  => load_decode_exec_pipe,
         exec_control           => exec_control,
         exec_control_in        => exec_control_in,
         exec_data_in           => exec_data_in
      );
   exec : execStage
      PORT MAP (
         CLK                   => CLK,
         cc                    => cc,
         exec_control_in       => exec_control_in,
         exec_data_in          => exec_data_in,
         exec_forward_addr_sel => exec_forward_addr_sel,
         exec_forward_cc_sel   => exec_forward_cc_sel,
         exec_forward_srca_sel => exec_forward_srca_sel,
         exec_forward_srcb_sel => exec_forward_srcb_sel,
         mem1_cc               => mem1_cc,
         mem1_data_in          => mem1_data_in,
         mem2_cc               => mem2_cc,
         mem2_data_in          => mem2_data_in,
         mem2_data_out         => mem2_data_out,
         wb_data_in            => wb_data_in,
         exec_btb_state        => exec_btb_state,
         exec_conditional      => exec_conditional,
         exec_control_buffer   => exec_control_buffer,
         exec_data_out         => exec_data_out,
         exec_load_pc          => exec_load_pc,
         exec_pc               => exec_pc,
         exec_taken            => exec_taken,
         exec_target_pc        => exec_target_pc
      );
   pipe3_em : exec_mem1_pipe
      PORT MAP (
         CLK                 => CLK,
         RESET_L             => RESET_L,
         exec_control        => exec_control,
         exec_data_out       => exec_data_out,
         load_exec_mem1_pipe => load_exec_mem1_pipe,
         mem1_insert_bubble  => mem1_insert_bubble,
         mem1_control        => mem1_control,
         mem1_control_in     => mem1_control_in,
         mem1_data_in        => mem1_data_in
      );
   pipe0_ff : fetch1_fetch2_pipe
      PORT MAP (
         CLK                        => CLK,
         RESET_L                    => RESET_L,
         fetch1_data_out            => fetch1_data_out,
         fetch2_insert_bubble       => fetch2_insert_bubble,
         icache_interstage_data_in  => icache_interstage_data_in,
         load_fetch1_fetch2_pipe    => load_fetch1_fetch2_pipe,
         fetch2_data_in             => fetch2_data_in,
         icache_interstage_data_out => icache_interstage_data_out,
         read_instr                 => read_instr
      );
   fetch1 : fetchStage1
      PORT MAP (
         CLK                       => CLK,
         RESET_L                   => RESET_L,
         btb_pc                    => btb_pc,
         btb_taken                 => btb_taken,
         btb_target_pc             => btb_target_pc,
         btb_unconditional         => btb_unconditional,
         btb_write                 => btb_write,
         decode_btb_state          => decode_btb_state,
         decode_conditional        => decode_conditional,
         decode_load_pc            => decode_load_pc,
         decode_pc                 => decode_pc,
         decode_prediction_correct => decode_prediction_correct,
         decode_taken              => decode_taken,
         decode_target_pc          => decode_target_pc,
         exec_btb_state            => exec_btb_state,
         exec_conditional          => exec_conditional,
         exec_control_buffer       => exec_control_buffer,
         exec_load_pc              => exec_load_pc,
         exec_pc                   => exec_pc,
         exec_prediction_correct   => exec_prediction_correct,
         exec_taken                => exec_taken,
         exec_target_pc            => exec_target_pc,
         icache_feedback           => icache_feedback,
         load_pc                   => load_pc,
         mem2_pc                   => mem2_pc,
         mem_btb_state             => mem_btb_state,
         mem_conditional           => mem_conditional,
         mem_load_pc               => mem_load_pc,
         mem_prediction_correct    => mem_prediction_correct,
         mem_taken                 => mem_taken,
         mem_target_pc             => mem_target_pc,
         target_pc_mux_sel         => target_pc_mux_sel,
         wb_cc                     => wb_cc,
         fetch1_data_out           => fetch1_data_out,
         icache_ReadIndex          => icache_ReadIndex,
         icache_interstage_data_in => icache_interstage_data_in
      );
   fetch2 : fetchStage2
      PORT MAP (
         CLK                        => CLK,
         RESET_L                    => RESET_L,
         decode_insert_bubble       => decode_insert_bubble,
         fetch2_data_in             => fetch2_data_in,
         icache_ReadIndex           => icache_ReadIndex,
         icache_interstage_data_out => icache_interstage_data_out,
         instr_in                   => instr_in,
         instr_resp_h               => instr_resp_h,
         load_icache_fwd_pipe       => load_icache_fwd_pipe,
         read_instr                 => read_instr,
         fetch2_data_out            => fetch2_data_out,
         fetch_ready                => fetch_ready,
         icache_feedback            => icache_feedback,
         instr_mread_l              => instr_mread_l,
         instr_mwrite_l             => instr_mwrite_l,
         instr_pm_addr              => instr_pm_addr,
         instr_pm_dataout           => instr_pm_dataout,
         instr_addr                 => instr_addr
      );
   pipe1_fd : fetch_decode_pipe
      PORT MAP (
         CLK                    => CLK,
         RESET_L                => RESET_L,
         fetch2_data_out        => fetch2_data_out,
         load_fetch_decode_pipe => load_fetch_decode_pipe,
         decode_data_in         => decode_data_in
      );
   toilet : flushUnit
      PORT MAP (
         CLK                       => CLK,
         btb_pc                    => btb_pc,
         btb_taken                 => btb_taken,
         btb_target_pc             => btb_target_pc,
         btb_unconditional         => btb_unconditional,
         btb_write                 => btb_write,
         decode_btb_state          => decode_btb_state,
         decode_conditional        => decode_conditional,
         decode_load_pc            => decode_load_pc,
         decode_pc                 => decode_pc,
         decode_taken              => decode_taken,
         decode_target_pc          => decode_target_pc,
         exec_btb_state            => exec_btb_state,
         exec_conditional          => exec_conditional,
         exec_control_buffer       => exec_control_buffer,
         exec_load_pc              => exec_load_pc,
         exec_pc                   => exec_pc,
         exec_taken                => exec_taken,
         exec_target_pc            => exec_target_pc,
         instr_addr                => instr_addr,
         mem2_pc                   => mem2_pc,
         mem_btb_state             => mem_btb_state,
         mem_conditional           => mem_conditional,
         mem_load_pc               => mem_load_pc,
         mem_taken                 => mem_taken,
         mem_target_pc             => mem_target_pc,
         wb_cc                     => wb_cc,
         decode_flush              => decode_flush,
         decode_flush_l            => decode_flush_l,
         decode_prediction_correct => decode_prediction_correct,
         exec_flush                => exec_flush,
         exec_flush_l              => exec_flush_l,
         exec_prediction_correct   => exec_prediction_correct,
         fetch2_flush              => fetch2_flush,
         fetch2_flush_l            => fetch2_flush_l,
         mem1_flush                => mem1_flush,
         mem1_flush_l              => mem1_flush_l,
         mem2_flush                => mem2_flush,
         mem2_flush_l              => mem2_flush_l,
         mem_prediction_correct    => mem_prediction_correct,
         target_pc_mux_sel         => target_pc_mux_sel,
         uarch_flush               => uarch_flush,
         uarch_flush_l             => uarch_flush_l
      );
   aForwardPipe : forward_pipe
      PORT MAP (
         CLK                     => CLK,
         RESET_L                 => RESET_L,
         exec_fw_addr_sel        => exec_fw_addr_sel,
         exec_fw_cc_sel          => exec_fw_cc_sel,
         exec_fw_src1_sel        => exec_fw_src1_sel,
         exec_fw_src2_sel        => exec_fw_src2_sel,
         load_fwd_pipe           => load_fwd_pipe,
         mem1_sr1_forward_sel    => mem1_sr1_forward_sel,
         mem1_sr2_forward_sel    => mem1_sr2_forward_sel,
         mem2_fw_sel             => mem2_fw_sel,
         stall_load_use_1cycle   => stall_load_use_1cycle,
         stall_load_use_2cycle   => stall_load_use_2cycle,
         exec_forward_addr_sel   => exec_forward_addr_sel,
         exec_forward_cc_sel     => exec_forward_cc_sel,
         exec_forward_srca_sel   => exec_forward_srca_sel,
         exec_forward_srcb_sel   => exec_forward_srcb_sel,
         mem1_sr1_fw_sel         => mem1_sr1_fw_sel,
         mem1_sr2_fw_sel         => mem1_sr2_fw_sel,
         mem2_foward_sel         => mem2_foward_sel,
         stall_load_use_buffer   => stall_load_use_buffer,
         stall_load_use_buffer_l => stall_load_use_buffer_l
      );
   aForwardingUnit : forwardingUnit
      PORT MAP (
         CLK                    => CLK,
         decode_uop_control_out => decode_uop_control_out,
         decode_uop_data_out    => decode_uop_data_out,
         exec_control           => exec_control,
         exec_data_in           => exec_data_in,
         mem1_control           => mem1_control,
         mem1_data_in           => mem1_data_in,
         mem2_control           => mem2_control,
         mem2_data_in           => mem2_data_in,
         exec_fw_addr_sel       => exec_fw_addr_sel,
         exec_fw_cc_sel         => exec_fw_cc_sel,
         exec_fw_src1_sel       => exec_fw_src1_sel,
         exec_fw_src2_sel       => exec_fw_src2_sel,
         mem1_sr1_forward_sel   => mem1_sr1_forward_sel,
         mem1_sr2_forward_sel   => mem1_sr2_forward_sel,
         mem2_fw_sel            => mem2_fw_sel,
         stall_load_use_1cycle  => stall_load_use_1cycle,
         stall_load_use_2cycle  => stall_load_use_2cycle
      );
   pipe4_mm : mem1_mem2_pipe
      PORT MAP (
         CLK                        => CLK,
         RESET_L                    => RESET_L,
         dcache_interstage_data_in  => dcache_interstage_data_in,
         load_mem1_mem2_pipe        => load_mem1_mem2_pipe,
         mem1_control               => mem1_control,
         mem1_data_out              => mem1_data_out,
         mem2_insert_bubble         => mem2_insert_bubble,
         dcache_interstage_data_out => dcache_interstage_data_out,
         mem2_control               => mem2_control,
         mem2_control_in            => mem2_control_in,
         mem2_data_in               => mem2_data_in,
         wb_control_in              => wb_control_in
      );
   pipe5_mw : mem2_wb_pipe
      PORT MAP (
         CLK               => CLK,
         RESET_L           => RESET_L,
         load_mem2_wb_pipe => load_mem2_wb_pipe,
         mem2_control      => mem2_control,
         mem2_data_out     => mem2_data_out,
         wb_data_in        => wb_data_in
      );
   mem1 : memStage1
      PORT MAP (
         CLK                       => CLK,
         RESET_L                   => RESET_L,
         dcache_feedback           => dcache_feedback,
         mem1_control_in           => mem1_control_in,
         mem1_data_in              => mem1_data_in,
         mem1_sr1_fw_sel           => mem1_sr1_fw_sel,
         mem1_sr2_fw_sel           => mem1_sr2_fw_sel,
         wb_data_in                => wb_data_in,
         dcache_ReadIndex          => dcache_ReadIndex,
         dcache_interstage_data_in => dcache_interstage_data_in,
         mem1_cc                   => mem1_cc,
         mem1_data_out             => mem1_data_out
      );
   mem2 : memStage2
      PORT MAP (
         CLK                        => CLK,
         RESET_L                    => RESET_L,
         data_in                    => data_in,
         data_resp_h                => data_resp_h,
         dcache_ReadIndex           => dcache_ReadIndex,
         dcache_interstage_data_out => dcache_interstage_data_out,
         load_dcache_fwd_pipe       => load_dcache_fwd_pipe,
         mem2_control_in            => mem2_control_in,
         mem2_data_in               => mem2_data_in,
         mem2_foward_sel            => mem2_foward_sel,
         wb_control_in              => wb_control_in,
         wb_data_in                 => wb_data_in,
         btb_pc                     => btb_pc,
         btb_taken                  => btb_taken,
         btb_target_pc              => btb_target_pc,
         btb_unconditional          => btb_unconditional,
         btb_write                  => btb_write,
         data_mread_l               => data_mread_l,
         data_mwrite_l              => data_mwrite_l,
         data_pm_addr               => data_pm_addr,
         data_pm_dataout            => data_pm_dataout,
         dcache_feedback            => dcache_feedback,
         mem2_cc                    => mem2_cc,
         mem2_data_out              => mem2_data_out,
         mem2_pc                    => mem2_pc,
         mem_btb_state              => mem_btb_state,
         mem_conditional            => mem_conditional,
         mem_load_pc                => mem_load_pc,
         mem_ready                  => mem_ready,
         mem_taken                  => mem_taken,
         mem_target_pc              => mem_target_pc,
         wb_cc                      => wb_cc,
         wb_dest                    => wb_dest,
         wb_din                     => wb_din,
         wb_load_cc                 => wb_load_cc,
         wb_rw                      => wb_rw
      );
   aUArch : uarch
      PORT MAP (
         CLK                   => CLK,
         decode_control_out    => decode_control_out,
         decode_data_out       => decode_data_out,
         uarch_stall_in        => uarch_stall_in,
         uop_instr_dr          => uop_instr_dr,
         uop_sr2               => uop_sr2,
         uop_sr2_val           => uop_sr2_val,
         uarch_control_out     => uarch_control_out,
         uarch_data_out        => uarch_data_out,
         uarch_sel_out         => uarch_sel_out,
         uarch_stall_in_buffer => uarch_stall_in_buffer
      );
   aUArchPipe : uarch_pipe
      PORT MAP (
         CLK                   => CLK,
         RESET_L               => RESET_L,
         load_uarch_pipe       => load_uarch_pipe,
         uarch_control_out     => uarch_control_out,
         uarch_data_out        => uarch_data_out,
         uarch_insert_bubble   => uarch_insert_bubble,
         uarch_sel_out         => uarch_sel_out,
         uarch_stall_in_buffer => uarch_stall_in_buffer,
         uarch_control_in      => uarch_control_in,
         uarch_data_in         => uarch_data_in,
         uarch_sel_in          => uarch_sel_in,
         uarch_stall_in        => uarch_stall_in
      );
   auop_mux : uop_mux
      PORT MAP (
         CLK                    => CLK,
         decode_control_out     => decode_control_out,
         decode_data_out        => decode_data_out,
         uarch_control_in       => uarch_control_in,
         uarch_data_in          => uarch_data_in,
         uarch_sel_in           => uarch_sel_in,
         decode_uop_control_out => decode_uop_control_out,
         decode_uop_data_out    => decode_uop_data_out
      );

END struct;
