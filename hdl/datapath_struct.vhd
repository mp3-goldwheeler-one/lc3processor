-- VHDL Entity ece411.Datapath.interface
--
-- Created:
--          by - wheele11.ews (gelib-057-06.ews.illinois.edu)
--          at - 20:06:02 03/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Datapath IS
   PORT( 
      CLK             : IN     std_logic;
      DATAIN          : IN     std_logic;
      RESET_L         : IN     STD_LOGIC;
      START_H         : IN     std_logic;
      data_resp_h     : IN     std_logic;
      instr_in        : IN     LC3B_WORD;
      instr_resp_h    : IN     std_logic;
      Dataout         : OUT    LC3b_word;
      data_addr       : OUT    LC3b_word;
      data_mread_l    : OUT    std_logic;
      data_mwriteh_l  : OUT    std_logic;
      data_mwritel_l  : OUT    std_logic;
      instr_addr      : OUT    LC3b_word;
      instr_mread_l   : OUT    std_logic;
      instr_mwriteh_l : OUT    std_logic;
      instr_mwritel_l : OUT    std_logic;
      instr_out       : OUT    std_logic
   );

-- Declarations

END Datapath ;

--
-- VHDL Architecture ece411.Datapath.struct
--
-- Created:
--          by - wheele11.ews (gelib-057-06.ews.illinois.edu)
--          at - 20:06:02 03/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL decode_alumux_sel : STD_LOGIC_VECTOR(1 DOWNTO 0);
   SIGNAL decode_aluop      : LC3b_aluop;
   SIGNAL decode_dr         : LC3B_REG;
   SIGNAL decode_instr      : LC3b_word;
   SIGNAL decode_opcode     : LC3b_opcode;
   SIGNAL decode_pc         : LC3b_word;
   SIGNAL decode_ready      : std_logic;
   SIGNAL decode_regwrite   : std_logic;
   SIGNAL decode_shift_imm  : STD_LOGIC;
   SIGNAL decode_src_a      : LC3b_word;
   SIGNAL decode_src_b      : LC3b_word;
   SIGNAL exec_alumux_sel   : LC3b_4mux_sel;
   SIGNAL exec_aluop        : LC3B_ALUOP;
   SIGNAL exec_aluout       : LC3B_WORD;
   SIGNAL exec_dr           : LC3B_REG;
   SIGNAL exec_instr        : LC3b_word;
   SIGNAL exec_opcode       : LC3b_opcode;
   SIGNAL exec_pc           : LC3b_word;
   SIGNAL exec_ready        : std_logic;
   SIGNAL exec_regwrite     : STD_LOGIC;
   SIGNAL exec_shift_imm    : STD_LOGIC;
   SIGNAL exec_src_a        : LC3b_word;
   SIGNAL exec_src_b        : LC3b_word;
   SIGNAL fetch_instr       : LC3b_word;
   SIGNAL fetch_ready       : std_logic;
   SIGNAL jump_pc           : LC3B_WORD;
   SIGNAL load_jump_pc      : STD_LOGIC;
   SIGNAL mem_aluout        : LC3B_WORD;
   SIGNAL mem_dr            : LC3B_REG;
   SIGNAL mem_instr         : LC3b_word;
   SIGNAL mem_opcode        : LC3b_opcode;
   SIGNAL mem_pc            : LC3b_word;
   SIGNAL mem_ready         : STD_LOGIC;
   SIGNAL mem_regwrite      : STD_LOGIC;
   SIGNAL mem_src_a         : LC3b_word;
   SIGNAL mem_src_b         : LC3b_word;
   SIGNAL pc                : LC3b_word;
   SIGNAL wb_aluout         : LC3b_word;
   SIGNAL wb_dest           : LC3B_REG;
   SIGNAL wb_din            : LC3B_WORD;
   SIGNAL wb_dr             : LC3B_REG;
   SIGNAL wb_instr          : LC3b_word;
   SIGNAL wb_opcode         : LC3b_opcode;
   SIGNAL wb_pc             : LC3b_word;
   SIGNAL wb_regwrite       : STD_LOGIC;
   SIGNAL wb_rw             : STD_LOGIC;
   SIGNAL wb_src_a          : LC3b_word;
   SIGNAL wb_src_b          : LC3b_word;


   -- Component Declarations
   COMPONENT decodeStage
   PORT (
      CLK               : IN     std_logic ;
      RESET_L           : IN     STD_LOGIC ;
      decode_instr      : IN     LC3b_word ;
      decode_pc         : IN     LC3b_word ;
      wb_dest           : IN     LC3B_REG ;
      wb_din            : IN     LC3B_WORD ;
      wb_rw             : IN     STD_LOGIC ;
      decode_alumux_sel : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      decode_aluop      : OUT    LC3b_aluop ;
      decode_dr         : OUT    LC3B_REG ;
      decode_opcode     : OUT    LC3b_opcode ;
      decode_ready      : OUT    std_logic ;
      decode_regwrite   : OUT    std_logic ;
      decode_shift_imm  : OUT    STD_LOGIC ;
      decode_src_a      : OUT    LC3b_word ;
      decode_src_b      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT decode_exec_pipe
   PORT (
      CLK               : IN     std_logic ;
      RESET_L           : IN     STD_LOGIC ;
      decode_alumux_sel : IN     STD_LOGIC_VECTOR (1 DOWNTO 0);
      decode_aluop      : IN     LC3b_aluop ;
      decode_dr         : IN     LC3B_REG ;
      decode_instr      : IN     LC3b_word ;
      decode_opcode     : IN     LC3b_opcode ;
      decode_pc         : IN     LC3b_word ;
      decode_ready      : IN     std_logic ;
      decode_regwrite   : IN     std_logic ;
      decode_shift_imm  : IN     STD_LOGIC ;
      decode_src_a      : IN     LC3b_word ;
      decode_src_b      : IN     LC3b_word ;
      exec_alumux_sel   : OUT    LC3b_4mux_sel ;
      exec_aluop        : OUT    LC3B_ALUOP ;
      exec_dr           : OUT    LC3B_REG ;
      exec_instr        : OUT    LC3b_word ;
      exec_opcode       : OUT    LC3b_opcode ;
      exec_pc           : OUT    LC3b_word ;
      exec_regwrite     : OUT    STD_LOGIC ;
      exec_shift_imm    : OUT    STD_LOGIC ;
      exec_src_a        : OUT    LC3b_word ;
      exec_src_b        : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT execStage
   PORT (
      CLK             : IN     std_logic ;
      exec_alumux_sel : IN     LC3b_4mux_sel ;
      exec_aluop      : IN     LC3B_ALUOP ;
      exec_dr         : IN     LC3B_REG ;
      exec_instr      : IN     LC3b_word ;
      exec_opcode     : IN     LC3b_opcode ;
      exec_pc         : IN     LC3b_word ;
      exec_regwrite   : IN     STD_LOGIC ;
      exec_shift_imm  : IN     STD_LOGIC ;
      exec_src_a      : IN     LC3b_word ;
      exec_src_b      : IN     LC3b_word ;
      exec_aluout     : OUT    LC3B_WORD ;
      exec_ready      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT exec_mem_pipe
   PORT (
      CLK             : IN     std_logic ;
      RESET_L         : IN     STD_LOGIC ;
      exec_alumux_sel : IN     LC3b_4mux_sel ;
      exec_aluop      : IN     LC3B_ALUOP ;
      exec_aluout     : IN     LC3B_WORD ;
      exec_dr         : IN     LC3B_REG ;
      exec_instr      : IN     LC3b_word ;
      exec_opcode     : IN     LC3b_opcode ;
      exec_pc         : IN     LC3b_word ;
      exec_ready      : IN     std_logic ;
      exec_regwrite   : IN     STD_LOGIC ;
      exec_shift_imm  : IN     STD_LOGIC ;
      exec_src_a      : IN     LC3b_word ;
      exec_src_b      : IN     LC3b_word ;
      jump_pc         : OUT    LC3B_WORD ;
      load_jump_pc    : OUT    STD_LOGIC ;
      mem_aluout      : OUT    LC3B_WORD ;
      mem_dr          : OUT    LC3B_REG ;
      mem_instr       : OUT    LC3b_word ;
      mem_opcode      : OUT    LC3b_opcode ;
      mem_pc          : OUT    LC3b_word ;
      mem_regwrite    : OUT    STD_LOGIC ;
      mem_src_a       : OUT    LC3b_word ;
      mem_src_b       : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT fetchStage
   PORT (
      CLK           : IN     std_logic ;
      RESET_L       : IN     STD_LOGIC ;
      instr_in      : IN     LC3B_WORD ;
      instr_resp_h  : IN     std_logic ;
      fetch_instr   : OUT    LC3b_word ;
      fetch_ready   : OUT    std_logic ;
      instr_addr    : OUT    LC3b_word ;
      instr_mread_l : OUT    std_logic ;
      pc            : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT fetch_decode_pipe
   PORT (
      CLK          : IN     std_logic ;
      RESET_L      : IN     STD_LOGIC ;
      fetch_instr  : IN     LC3b_word ;
      fetch_ready  : IN     std_logic ;
      pc           : IN     LC3b_word ;
      decode_instr : OUT    LC3b_word ;
      decode_pc    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT forwardingUnit
   PORT (
      CLK : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT memStage
   PORT (
      CLK            : IN     std_logic ;
      DATAIN         : IN     std_logic ;
      data_resp_h    : IN     std_logic ;
      Dataout        : OUT    LC3b_word ;
      data_addr      : OUT    LC3b_word ;
      data_mread_l   : OUT    std_logic ;
      data_mwriteh_l : OUT    std_logic ;
      data_mwritel_l : OUT    std_logic ;
      mem_ready      : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT mem_wb_pipe
   PORT (
      CLK          : IN     std_logic ;
      RESET_L      : IN     STD_LOGIC ;
      mem_aluout   : IN     LC3B_WORD ;
      mem_dr       : IN     LC3B_REG ;
      mem_instr    : IN     LC3b_word ;
      mem_opcode   : IN     LC3b_opcode ;
      mem_pc       : IN     LC3b_word ;
      mem_ready    : IN     std_logic ;
      mem_regwrite : IN     STD_LOGIC ;
      mem_src_a    : IN     LC3b_word ;
      mem_src_b    : IN     LC3b_word ;
      wb_aluout    : OUT    LC3b_word ;
      wb_dr        : OUT    LC3B_REG ;
      wb_instr     : OUT    LC3b_word ;
      wb_opcode    : OUT    LC3b_opcode ;
      wb_pc        : OUT    LC3b_word ;
      wb_regwrite  : OUT    STD_LOGIC ;
      wb_src_a     : OUT    LC3b_word ;
      wb_src_b     : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT wbStage
   PORT (
      CLK         : IN     std_logic ;
      wb_aluout   : IN     LC3b_word ;
      wb_dr       : IN     LC3B_REG ;
      wb_instr    : IN     LC3b_word ;
      wb_opcode   : IN     LC3b_opcode ;
      wb_pc       : IN     LC3b_word ;
      wb_regwrite : IN     STD_LOGIC ;
      wb_src_a    : IN     LC3b_word ;
      wb_src_b    : IN     LC3b_word ;
      wb_dest     : OUT    LC3B_REG ;
      wb_din      : OUT    LC3B_WORD ;
      wb_rw       : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : decodeStage USE ENTITY ece411.decodeStage;
   FOR ALL : decode_exec_pipe USE ENTITY ece411.decode_exec_pipe;
   FOR ALL : execStage USE ENTITY ece411.execStage;
   FOR ALL : exec_mem_pipe USE ENTITY ece411.exec_mem_pipe;
   FOR ALL : fetchStage USE ENTITY ece411.fetchStage;
   FOR ALL : fetch_decode_pipe USE ENTITY ece411.fetch_decode_pipe;
   FOR ALL : forwardingUnit USE ENTITY ece411.forwardingUnit;
   FOR ALL : memStage USE ENTITY ece411.memStage;
   FOR ALL : mem_wb_pipe USE ENTITY ece411.mem_wb_pipe;
   FOR ALL : wbStage USE ENTITY ece411.wbStage;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   decode : decodeStage
      PORT MAP (
         CLK               => CLK,
         RESET_L           => RESET_L,
         decode_instr      => decode_instr,
         decode_pc         => decode_pc,
         wb_dest           => wb_dest,
         wb_din            => wb_din,
         wb_rw             => wb_rw,
         decode_alumux_sel => decode_alumux_sel,
         decode_aluop      => decode_aluop,
         decode_dr         => decode_dr,
         decode_opcode     => decode_opcode,
         decode_ready      => decode_ready,
         decode_regwrite   => decode_regwrite,
         decode_shift_imm  => decode_shift_imm,
         decode_src_a      => decode_src_a,
         decode_src_b      => decode_src_b
      );
   pipe2_de : decode_exec_pipe
      PORT MAP (
         CLK               => CLK,
         RESET_L           => RESET_L,
         decode_alumux_sel => decode_alumux_sel,
         decode_aluop      => decode_aluop,
         decode_dr         => decode_dr,
         decode_instr      => decode_instr,
         decode_opcode     => decode_opcode,
         decode_pc         => decode_pc,
         decode_ready      => decode_ready,
         decode_regwrite   => decode_regwrite,
         decode_shift_imm  => decode_shift_imm,
         decode_src_a      => decode_src_a,
         decode_src_b      => decode_src_b,
         exec_alumux_sel   => exec_alumux_sel,
         exec_aluop        => exec_aluop,
         exec_dr           => exec_dr,
         exec_instr        => exec_instr,
         exec_opcode       => exec_opcode,
         exec_pc           => exec_pc,
         exec_regwrite     => exec_regwrite,
         exec_shift_imm    => exec_shift_imm,
         exec_src_a        => exec_src_a,
         exec_src_b        => exec_src_b
      );
   exec : execStage
      PORT MAP (
         CLK             => CLK,
         exec_alumux_sel => exec_alumux_sel,
         exec_aluop      => exec_aluop,
         exec_dr         => exec_dr,
         exec_instr      => exec_instr,
         exec_opcode     => exec_opcode,
         exec_pc         => exec_pc,
         exec_regwrite   => exec_regwrite,
         exec_shift_imm  => exec_shift_imm,
         exec_src_a      => exec_src_a,
         exec_src_b      => exec_src_b,
         exec_aluout     => exec_aluout,
         exec_ready      => exec_ready
      );
   pipe3_em : exec_mem_pipe
      PORT MAP (
         CLK             => CLK,
         RESET_L         => RESET_L,
         exec_alumux_sel => exec_alumux_sel,
         exec_aluop      => exec_aluop,
         exec_aluout     => exec_aluout,
         exec_dr         => exec_dr,
         exec_instr      => exec_instr,
         exec_opcode     => exec_opcode,
         exec_pc         => exec_pc,
         exec_ready      => exec_ready,
         exec_regwrite   => exec_regwrite,
         exec_shift_imm  => exec_shift_imm,
         exec_src_a      => exec_src_a,
         exec_src_b      => exec_src_b,
         jump_pc         => jump_pc,
         load_jump_pc    => load_jump_pc,
         mem_aluout      => mem_aluout,
         mem_dr          => mem_dr,
         mem_instr       => mem_instr,
         mem_opcode      => mem_opcode,
         mem_pc          => mem_pc,
         mem_regwrite    => mem_regwrite,
         mem_src_a       => mem_src_a,
         mem_src_b       => mem_src_b
      );
   fetch : fetchStage
      PORT MAP (
         CLK           => CLK,
         RESET_L       => RESET_L,
         instr_in      => instr_in,
         instr_resp_h  => instr_resp_h,
         fetch_instr   => fetch_instr,
         fetch_ready   => fetch_ready,
         instr_addr    => instr_addr,
         instr_mread_l => instr_mread_l,
         pc            => pc
      );
   pipe1_fd : fetch_decode_pipe
      PORT MAP (
         CLK          => CLK,
         RESET_L      => RESET_L,
         fetch_instr  => fetch_instr,
         fetch_ready  => fetch_ready,
         pc           => pc,
         decode_instr => decode_instr,
         decode_pc    => decode_pc
      );
   U_11 : forwardingUnit
      PORT MAP (
         CLK => CLK
      );
   men : memStage
      PORT MAP (
         CLK            => CLK,
         DATAIN         => DATAIN,
         data_resp_h    => data_resp_h,
         Dataout        => Dataout,
         data_addr      => data_addr,
         data_mread_l   => data_mread_l,
         data_mwriteh_l => data_mwriteh_l,
         data_mwritel_l => data_mwritel_l,
         mem_ready      => mem_ready
      );
   pipe4_mw : mem_wb_pipe
      PORT MAP (
         CLK          => CLK,
         RESET_L      => RESET_L,
         mem_aluout   => mem_aluout,
         mem_dr       => mem_dr,
         mem_instr    => mem_instr,
         mem_opcode   => mem_opcode,
         mem_pc       => mem_pc,
         mem_ready    => mem_ready,
         mem_regwrite => mem_regwrite,
         mem_src_a    => mem_src_a,
         mem_src_b    => mem_src_b,
         wb_aluout    => wb_aluout,
         wb_dr        => wb_dr,
         wb_instr     => wb_instr,
         wb_opcode    => wb_opcode,
         wb_pc        => wb_pc,
         wb_regwrite  => wb_regwrite,
         wb_src_a     => wb_src_a,
         wb_src_b     => wb_src_b
      );
   wb : wbStage
      PORT MAP (
         CLK         => CLK,
         wb_aluout   => wb_aluout,
         wb_dr       => wb_dr,
         wb_instr    => wb_instr,
         wb_opcode   => wb_opcode,
         wb_pc       => wb_pc,
         wb_regwrite => wb_regwrite,
         wb_src_a    => wb_src_a,
         wb_src_b    => wb_src_b,
         wb_dest     => wb_dest,
         wb_din      => wb_din,
         wb_rw       => wb_rw
      );

END struct;
