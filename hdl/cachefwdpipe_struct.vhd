-- VHDL Entity ece411.CacheFwdPipe.interface
--
-- Created:
--          by - goldste6.ews (siebl-0224-29.ews.illinois.edu)
--          at - 21:53:40 04/16/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY CacheFwdPipe IS
   PORT( 
      CLK                 : IN     std_logic;
      RESET_L             : IN     STD_LOGIC;
      WayDataIn           : IN     LC3b_OWORD;
      WriteTag            : IN     LC3b_C_TAG;
      load_cache_fwd_pipe : IN     std_logic;
      lru_data_in         : IN     STD_LOGIC;
      next_index_match    : IN     std_logic;
      next_replace_way0   : IN     std_logic;
      next_replace_way1   : IN     std_logic;
      set_dirty           : IN     std_logic;
      write0              : IN     std_logic;
      write1              : IN     std_logic;
      index_match         : OUT    STD_LOGIC;
      last_Set_Dirty      : OUT    std_logic;
      last_WayDataIn      : OUT    LC3b_OWORD;
      last_WriteTag       : OUT    LC3b_c_tag;
      last_lru_data_in    : OUT    std_logic;
      last_write0         : OUT    std_logic;
      last_write1         : OUT    STD_LOGIC;
      replace_way0        : OUT    std_logic;
      replace_way1        : OUT    std_logic
   );

-- Declarations

END CacheFwdPipe ;

--
-- VHDL Architecture ece411.CacheFwdPipe.struct
--
-- Created:
--          by - goldste6.ews (siebl-0224-29.ews.illinois.edu)
--          at - 21:53:41 04/16/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF CacheFwdPipe IS

   -- Architecture declarations

   -- Internal signal declarations


   -- Component Declarations
   COMPONENT Reg_128
   PORT (
      Clk     : IN     std_logic ;
      Data    : IN     LC3b_oword ;
      Write   : IN     std_logic ;
      DataOut : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT Reg_N
   GENERIC (
      N : Integer
   );
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     std_logic_vector (n-1 DOWNTO 0);
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    std_logic_vector (n-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : REG1 USE ENTITY mp3lib.REG1;
   FOR ALL : Reg_128 USE ENTITY ece411.Reg_128;
   FOR ALL : Reg_N USE ENTITY ece411.Reg_N;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_7 : Reg_128
      PORT MAP (
         Clk     => CLK,
         Data    => WayDataIn,
         Write   => load_cache_fwd_pipe,
         DataOut => last_WayDataIn
      );
   U_8 : Reg_N
      GENERIC MAP (
         N => 9
      )
      PORT MAP (
         RESET_L => RESET_L,
         A       => WriteTag,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => last_WriteTag
      );
   U_0 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => next_index_match,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => index_match
      );
   U_1 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => next_replace_way0,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => replace_way0
      );
   U_2 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => next_replace_way1,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => replace_way1
      );
   U_3 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => lru_data_in,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => last_lru_data_in
      );
   U_4 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => set_dirty,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => last_Set_Dirty
      );
   U_5 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => write0,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => last_write0
      );
   U_6 : REG1
      PORT MAP (
         RESET_L => RESET_L,
         A       => write1,
         EN      => load_cache_fwd_pipe,
         CLK     => CLK,
         F       => last_write1
      );

END struct;
