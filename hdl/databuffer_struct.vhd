-- VHDL Entity ece411.DataBuffer.symbol
--
-- Created:
--          by - wheele11.ews (linux5.ews.illinois.edu)
--          at - 23:26:39 04/06/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY DataBuffer IS
   PORT( 
      CLK                   : IN     std_logic;
      RESET_L               : IN     STD_LOGIC;
      data                  : IN     pipe_data;
      drive_aluout          : IN     STD_LOGIC;
      drive_dr              : IN     STD_LOGIC;
      drive_dr_val          : IN     STD_LOGIC;
      drive_idx6            : IN     STD_LOGIC;
      drive_imm4            : IN     STD_LOGIC;
      drive_imm5            : IN     STD_LOGIC;
      drive_load_jump_pc    : IN     STD_LOGIC;
      drive_mem_data_in     : IN     STD_LOGIC;
      drive_off11           : IN     STD_LOGIC;
      drive_off9            : IN     STD_LOGIC;
      drive_sr1             : IN     STD_LOGIC;
      drive_sr1_val         : IN     STD_LOGIC;
      drive_sr2             : IN     STD_LOGIC;
      drive_sr2_val         : IN     STD_LOGIC;
      load_decode_exec_pipe : IN     STD_LOGIC;
      F                     : OUT    pipe_data
   );

-- Declarations

END DataBuffer ;

--
-- VHDL Architecture ece411.DataBuffer.struct
--
-- Created:
--          by - wheele11.ews (linux5.ews.illinois.edu)
--          at - 23:26:40 04/06/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF DataBuffer IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL aluout_data       : lc3b_word;
   SIGNAL dr_data           : LC3b_reg;
   SIGNAL dr_val_data       : lc3b_word;
   SIGNAL f_aluout          : LC3b_word;
   SIGNAL f_dr              : LC3b_reg;
   SIGNAL f_dr_val          : LC3b_word;
   SIGNAL f_idx6            : LC3b_index6;
   SIGNAL f_imm4            : Lc3b_imm4;
   SIGNAL f_imm5            : LC3b_imm5;
   SIGNAL f_load_jump_pc    : std_logic;
   SIGNAL f_mem_data_in     : LC3b_word;
   SIGNAL f_off11           : LC3b_offset11;
   SIGNAL f_off9            : LC3b_offset9;
   SIGNAL f_sr1             : LC3b_reg;
   SIGNAL f_sr1_val         : LC3b_word;
   SIGNAL f_sr2             : LC3b_reg;
   SIGNAL f_sr2_val         : LC3b_word;
   SIGNAL idx6_data         : LC3b_index6;
   SIGNAL imm4_data         : LC3b_imm4;
   SIGNAL imm5_data         : LC3b_imm5;
   SIGNAL load_jump_pc_data : std_logic;
   SIGNAL mem_data_in_data  : lc3b_word;
   SIGNAL off11_data        : LC3b_offset11;
   SIGNAL off9_data         : LC3b_offset9;
   SIGNAL reg_data          : pipe_data;
   SIGNAL sr1_data          : LC3b_reg;
   SIGNAL sr1_val_data      : lc3b_word;
   SIGNAL sr2_data          : LC3b_reg;
   SIGNAL sr2_val_data      : lc3b_word;


   -- Component Declarations
   COMPONENT RegData
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     pipe_data ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     std_logic ;
      F       : OUT    pipe_data 
   );
   END COMPONENT;
   COMPONENT TRISTATEN_H
   GENERIC (
      n : natural
   );
   PORT (
      A  : IN     STD_LOGIC_VECTOR (n-1 DOWNTO 0);
      EN : IN     STD_LOGIC;
      F  : OUT    STD_LOGIC_VECTOR (n-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT TRISTATE1_L
   PORT (
      A  : IN     STD_LOGIC ;
      EN : IN     STD_LOGIC ;
      F  : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : RegData USE ENTITY ece411.RegData;
   FOR ALL : TRISTATE1_L USE ENTITY mp3lib.TRISTATE1_L;
   FOR ALL : TRISTATEN_H USE ENTITY ece411.TRISTATEN_H;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- Reg Data Signals
   aluout_data       <= reg_data.aluout;
   mem_data_in_data  <= reg_data.mem_data_in;
   sr1_val_data      <= reg_data.sr1_val;
   sr2_val_data      <= reg_data.sr2_val;
   dr_val_data       <= reg_data.dr_val;
   dr_data           <= reg_data.dr;
   sr1_data          <= reg_data.sr1;
   sr2_data          <= reg_data.sr2;
   imm4_data         <= reg_data.imm4;
   imm5_data         <= reg_data.imm5;
   idx6_data         <= reg_data.idx6;
   off9_data         <= reg_data.off9;
   off11_data        <= reg_data.off11;
   load_jump_pc_data <= reg_data.load_jump_pc;
   
   F.aluout          <= f_aluout;
   F.mem_data_in     <= f_mem_data_in;
   F.sr1_val         <= f_sr1_val;
   F.sr2_val         <= f_sr2_val;
   F.dr_val          <= f_dr_val;
   F.dr              <= f_dr;
   F.sr1             <= f_sr1;
   F.sr2             <= f_sr2;
   F.imm4            <= f_imm4;
   F.imm5            <= f_imm5;
   F.idx6            <= f_idx6;
   F.off9            <= f_off9;
   F.off11           <= f_off11;
   F.load_jump_pc    <= f_load_jump_pc;


   -- Instance port mappings.
   aRegData : RegData
      PORT MAP (
         RESET_L => RESET_L,
         A       => data,
         EN      => load_decode_exec_pipe,
         CLK     => CLK,
         F       => reg_data
      );
   U_0 : TRISTATEN_H
      GENERIC MAP (
         n => 16
      )
      PORT MAP (
         A  => aluout_data,
         EN => drive_aluout,
         F  => f_aluout
      );
   U_1 : TRISTATEN_H
      GENERIC MAP (
         n => 16
      )
      PORT MAP (
         A  => mem_data_in_data,
         EN => drive_mem_data_in,
         F  => f_mem_data_in
      );
   U_2 : TRISTATEN_H
      GENERIC MAP (
         n => 16
      )
      PORT MAP (
         A  => sr1_val_data,
         EN => drive_sr1_val,
         F  => f_sr1_val
      );
   U_3 : TRISTATEN_H
      GENERIC MAP (
         n => 16
      )
      PORT MAP (
         A  => sr2_val_data,
         EN => drive_sr2_val,
         F  => f_sr2_val
      );
   U_4 : TRISTATEN_H
      GENERIC MAP (
         n => 16
      )
      PORT MAP (
         A  => dr_val_data,
         EN => drive_dr_val,
         F  => f_dr_val
      );
   U_5 : TRISTATEN_H
      GENERIC MAP (
         n => 4
      )
      PORT MAP (
         A  => dr_data,
         EN => drive_dr,
         F  => f_dr
      );
   U_6 : TRISTATEN_H
      GENERIC MAP (
         n => 4
      )
      PORT MAP (
         A  => imm4_data,
         EN => drive_imm4,
         F  => f_imm4
      );
   U_7 : TRISTATEN_H
      GENERIC MAP (
         n => 5
      )
      PORT MAP (
         A  => imm5_data,
         EN => drive_imm5,
         F  => f_imm5
      );
   U_8 : TRISTATEN_H
      GENERIC MAP (
         n => 6
      )
      PORT MAP (
         A  => idx6_data,
         EN => drive_idx6,
         F  => f_idx6
      );
   U_9 : TRISTATEN_H
      GENERIC MAP (
         n => 9
      )
      PORT MAP (
         A  => off9_data,
         EN => drive_off9,
         F  => f_off9
      );
   U_10 : TRISTATEN_H
      GENERIC MAP (
         n => 11
      )
      PORT MAP (
         A  => off11_data,
         EN => drive_off11,
         F  => f_off11
      );
   U_12 : TRISTATEN_H
      GENERIC MAP (
         n => 4
      )
      PORT MAP (
         A  => sr1_data,
         EN => drive_sr1,
         F  => f_sr1
      );
   U_13 : TRISTATEN_H
      GENERIC MAP (
         n => 4
      )
      PORT MAP (
         A  => sr2_data,
         EN => drive_sr2,
         F  => f_sr2
      );
   U_11 : TRISTATE1_L
      PORT MAP (
         A  => load_jump_pc_data,
         EN => drive_load_jump_pc,
         F  => f_load_jump_pc
      );

END struct;
