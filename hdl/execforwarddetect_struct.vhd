-- VHDL Entity ece411.ExecForwardDetect.symbol
--
-- Created:
--          by - one1.ews (gelib-057-06.ews.illinois.edu)
--          at - 17:43:45 03/29/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY ExecForwardDetect IS
   PORT( 
      dec_sr                : IN     LC3b_reg;
      decode_mem_write_byte : IN     STD_LOGIC;
      decode_mem_write_word : IN     STD_LOGIC;
      exec_dr               : IN     LC3b_reg;
      exec_mem_read         : IN     STD_LOGIC;
      exec_regwrite         : IN     STD_LOGIC;
      mem_dr                : IN     LC3b_reg;
      mem_mem_read          : IN     STD_LOGIC;
      mem_regwrite          : IN     STD_LOGIC;
      exec_fw_sr_sel        : OUT    LC3b_4mux_sel;
      stall_load_use        : OUT    STD_LOGIC
   );

-- Declarations

END ExecForwardDetect ;

--
-- VHDL Architecture ece411.ExecForwardDetect.struct
--
-- Created:
--          by - one1.ews (gelib-057-06.ews.illinois.edu)
--          at - 17:43:46 03/29/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF ExecForwardDetect IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F          : STD_LOGIC;
   SIGNAL F1         : STD_LOGIC;
   SIGNAL F2         : STD_LOGIC;
   SIGNAL F3         : STD_LOGIC;
   SIGNAL Y          : std_logic;
   SIGNAL Y1         : std_logic;
   SIGNAL exec_match : STD_LOGIC;
   SIGNAL highbit    : STD_LOGIC;
   SIGNAL lowbit     : STD_LOGIC;
   SIGNAL mem_match  : STD_LOGIC;


   -- Component Declarations
   COMPONENT Comparator
   GENERIC (
      N     : Integer;
      Delay : time
   );
   PORT (
      A : IN     std_logic_vector (N-1 DOWNTO 0);
      B : IN     std_logic_vector (N-1 DOWNTO 0);
      Y : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : Comparator USE ENTITY ece411.Comparator;
   FOR ALL : NOR2 USE ENTITY mp3lib.NOR2;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   exec_fw_sr_sel <= highbit & lowbit;


   -- Instance port mappings.
   U_0 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => dec_sr,
         B => mem_dr,
         Y => Y
      );
   U_1 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => dec_sr,
         B => exec_dr,
         Y => Y1
      );
   U_3 : AND2
      PORT MAP (
         A => Y,
         B => mem_regwrite,
         F => mem_match
      );
   U_4 : AND2
      PORT MAP (
         A => F2,
         B => F3,
         F => stall_load_use
      );
   U_5 : AND2
      PORT MAP (
         A => Y1,
         B => exec_regwrite,
         F => exec_match
      );
   U_6 : AND2
      PORT MAP (
         A => exec_mem_read,
         B => exec_match,
         F => F3
      );
   U_7 : AND2
      PORT MAP (
         A => F,
         B => mem_match,
         F => highbit
      );
   U_10 : AND2
      PORT MAP (
         A => mem_match,
         B => mem_mem_read,
         F => F1
      );
   U_2 : NOR2
      PORT MAP (
         A => decode_mem_write_byte,
         B => decode_mem_write_word,
         F => F2
      );
   U_8 : NOT1
      PORT MAP (
         A => exec_match,
         F => F
      );
   U_9 : OR2
      PORT MAP (
         A => F1,
         B => exec_match,
         F => lowbit
      );

END struct;
