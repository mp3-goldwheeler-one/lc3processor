-- VHDL Entity ece411.forwardingUnit.interface
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY forwardingUnit IS
   PORT( 
      CLK                    : IN     std_logic;
      decode_uop_control_out : IN     control_word;
      decode_uop_data_out    : IN     pipe_data;
      exec_control           : IN     control_word;
      exec_data_in           : IN     pipe_data;
      mem1_control           : IN     control_word;
      mem1_data_in           : IN     pipe_data;
      mem2_control           : IN     control_word;
      mem2_data_in           : IN     pipe_data;
      exec_fw_addr_sel       : OUT    std_logic;
      exec_fw_cc_sel         : OUT    LC3b_TRISTATE_4mux_sel;
      exec_fw_src1_sel       : OUT    LC3b_TRISTATE_4mux_sel;
      exec_fw_src2_sel       : OUT    LC3b_TRISTATE_4mux_sel;
      mem1_sr1_forward_sel   : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      mem1_sr2_forward_sel   : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      mem2_fw_sel            : OUT    std_logic;
      stall_load_use_1cycle  : OUT    STD_LOGIC;
      stall_load_use_2cycle  : OUT    STD_LOGIC
   );

-- Declarations

END forwardingUnit ;

--
-- VHDL Architecture ece411.forwardingUnit.struct
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF forwardingUnit IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL B                         : STD_LOGIC;
   SIGNAL F                         : STD_LOGIC;
   SIGNAL F1                        : STD_LOGIC;
   SIGNAL F2                        : STD_LOGIC;
   SIGNAL F3                        : STD_LOGIC;
   SIGNAL F4                        : STD_LOGIC;
   SIGNAL F5                        : STD_LOGIC;
   SIGNAL F6                        : STD_LOGIC;
   SIGNAL F7                        : STD_LOGIC;
   SIGNAL Y                         : std_logic;
   SIGNAL Y1                        : std_logic;
   SIGNAL Y2                        : std_logic;
   SIGNAL Y3                        : std_logic;
   SIGNAL Y4                        : std_logic;
   SIGNAL Y5                        : std_logic;
   SIGNAL Y6                        : std_logic;
   SIGNAL cc_mem2_sel               : STD_LOGIC;
   SIGNAL cc_no_fw                  : STD_LOGIC;
   SIGNAL cc_wb_sel                 : STD_LOGIC;
   SIGNAL dec_sr1                   : LC3b_reg;
   SIGNAL dec_sr2                   : LC3b_reg;
   SIGNAL decode_br                 : STD_LOGIC;
   SIGNAL decode_sr1_needed         : STD_LOGIC;
   SIGNAL decode_sr2_needed         : STD_LOGIC;
   SIGNAL decode_trap               : STD_LOGIC;
   SIGNAL decode_trap_L             : STD_LOGIC;
   SIGNAL decode_wbdatamux_sel      : STD_LOGIC;
   SIGNAL decode_write_byte         : STD_LOGIC;
   SIGNAL decode_write_word         : STD_LOGIC;
   SIGNAL exec_dr                   : LC3b_reg;
   SIGNAL exec_regwrite             : STD_LOGIC;
   SIGNAL exec_set_cc               : std_logic;
   SIGNAL exec_sr1                  : LC3b_reg;
   SIGNAL exec_sr2                  : LC3b_reg;
   SIGNAL exec_wbdatamux_sel        : STD_LOGIC;
   SIGNAL idx6                      : LC3b_index6;
   SIGNAL idx6_zeros                : LC3b_index6;
   SIGNAL mem1_dr                   : LC3b_reg;
   SIGNAL mem1_regwrite             : STD_LOGIC;
   SIGNAL mem1_set_cc               : STD_LOGIC;
   SIGNAL mem1_sr1_forward_sel_h    : STD_LOGIC;
   SIGNAL mem1_sr1_forward_sel_l    : STD_LOGIC;
   SIGNAL mem1_sr2                  : LC3b_reg;
   SIGNAL mem1_sr2_forward_sel_h    : STD_LOGIC;
   SIGNAL mem1_sr2_forward_sel_l    : STD_LOGIC;
   SIGNAL mem1_wbdatamux_sel        : STD_LOGIC;
   SIGNAL mem2_dr                   : LC3B_reg;
   SIGNAL mem2_regwrite             : STD_LOGIC;
   SIGNAL mem2_set_cc               : std_logic;
   SIGNAL stall_load_use_1cycle_sr1 : STD_LOGIC;
   SIGNAL stall_load_use_1cycle_sr2 : STD_LOGIC;
   SIGNAL stall_load_use_2cycle_sr1 : STD_LOGIC;
   SIGNAL stall_load_use_2cycle_sr2 : STD_LOGIC;
   SIGNAL zero                      : STD_LOGIC;


   -- Component Declarations
   COMPONENT And4
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      D : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT Comparator
   GENERIC (
      N     : Integer;
      Delay : time
   );
   PORT (
      A : IN     std_logic_vector (N-1 DOWNTO 0);
      B : IN     std_logic_vector (N-1 DOWNTO 0);
      Y : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT ExecForwardDetect
   PORT (
      dec_sr                : IN     LC3b_reg ;
      exec_dr               : IN     LC3b_reg ;
      exec_mem_read         : IN     STD_LOGIC ;
      exec_regwrite         : IN     STD_LOGIC ;
      mem1_dr               : IN     LC3b_reg ;
      mem1_mem_read         : IN     STD_LOGIC ;
      mem1_regwrite         : IN     STD_LOGIC ;
      mem2_dr               : IN     LC3B_reg ;
      mem2_regwrite         : IN     STD_LOGIC ;
      needed_for_exec       : IN     STD_LOGIC ;
      stall_for_addr_mux    : IN     STD_LOGIC ;
      exec_fw_sr_sel        : OUT    LC3b_TRISTATE_4mux_sel ;
      stall_load_use_1cycle : OUT    STD_LOGIC ;
      stall_load_use_2cycle : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : And4 USE ENTITY ece411.And4;
   FOR ALL : Comparator USE ENTITY ece411.Comparator;
   FOR ALL : ExecForwardDetect USE ENTITY ece411.ExecForwardDetect;
   FOR ALL : NAND2 USE ENTITY mp3lib.NAND2;
   FOR ALL : NOR3 USE ENTITY mp3lib.NOR3;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   dec_sr1 <= decode_uop_data_out.sr1;
   dec_sr2 <= decode_uop_data_out.sr2;
   
   exec_dr  <= exec_data_in.dr;
   exec_sr1 <= exec_data_in.sr1;
   exec_sr2 <= exec_data_in.sr2;
   
   mem1_sr2 <= mem1_data_in.sr2;
   mem1_dr  <= mem1_data_in.dr;
   mem2_dr  <= mem2_data_in.dr;
   
   exec_regwrite <= exec_control.wb.regwrite;
   mem1_regwrite <= mem1_control.wb.regwrite;
   mem2_regwrite <= mem2_control.wb.regwrite; 
   
   exec_set_cc <= exec_control.wb.set_cc;
   mem1_set_cc <= mem1_control.wb.set_cc;
   mem2_set_cc <= mem2_control.wb.set_cc;
   
   decode_wbdatamux_sel <= decode_uop_control_out.mem.wbdatamux_sel;
   exec_wbdatamux_sel   <= exec_control.mem.wbdatamux_sel;
   mem1_wbdatamux_sel    <= mem1_control.mem.wbdatamux_sel;
   
   decode_write_byte <= decode_uop_control_out.mem.mem_write_byte;
   decode_write_word <= decode_uop_control_out.mem.mem_write_word;
   
   decode_sr1_needed <= decode_uop_control_out.dec.sr1_needed;
   decode_sr2_needed <= decode_uop_control_out.dec.sr2_needed;
   
   zero <= '0';
   
   decode_trap <= decode_uop_control_out.mem.trap;

   -- HDL Embedded Text Block 2 eb2
   exec_fw_cc_sel <= cc_wb_sel & cc_mem2_sel & exec_set_cc & cc_no_fw;

   -- HDL Embedded Text Block 3 eb3
   idx6_zeros <= "000000";
   idx6       <= decode_uop_data_out.idx6;
   
   decode_br  <= decode_uop_control_out.exec.br;

   -- HDL Embedded Text Block 4 eb4
   mem1_sr1_forward_sel <= mem1_sr1_forward_sel_h & mem1_sr1_forward_sel_l;
   mem1_sr2_forward_sel <= mem1_sr2_forward_sel_h & mem1_sr2_forward_sel_l;


   -- Instance port mappings.
   U_8 : And4
      PORT MAP (
         A => Y4,
         B => F7,
         C => F6,
         D => decode_trap_L,
         F => exec_fw_addr_sel
      );
   U_4 : Comparator
      GENERIC MAP (
         N     => 6,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => idx6,
         B => idx6_zeros,
         Y => Y1
      );
   U_5 : Comparator
      GENERIC MAP (
         N     => 4,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => mem1_sr2,
         B => mem2_dr,
         Y => Y3
      );
   U_7 : Comparator
      GENERIC MAP (
         N     => 4,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => dec_sr1,
         B => mem1_dr,
         Y => Y4
      );
   U_21 : Comparator
      GENERIC MAP (
         N     => 4,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => dec_sr1,
         B => exec_dr,
         Y => Y2
      );
   U_23 : Comparator
      GENERIC MAP (
         N     => 4,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => exec_sr1,
         B => mem2_dr,
         Y => Y5
      );
   U_25 : Comparator
      GENERIC MAP (
         N     => 4,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => exec_sr2,
         B => mem2_dr,
         Y => Y6
      );
   Sr1ExecDetect : ExecForwardDetect
      PORT MAP (
         dec_sr                => dec_sr1,
         exec_dr               => exec_dr,
         exec_mem_read         => exec_wbdatamux_sel,
         exec_regwrite         => exec_regwrite,
         mem1_dr               => mem1_dr,
         mem1_mem_read         => mem1_wbdatamux_sel,
         mem1_regwrite         => mem1_regwrite,
         mem2_dr               => mem2_dr,
         mem2_regwrite         => mem2_regwrite,
         needed_for_exec       => decode_sr1_needed,
         stall_for_addr_mux    => Y,
         exec_fw_sr_sel        => exec_fw_src1_sel,
         stall_load_use_1cycle => stall_load_use_1cycle_sr1,
         stall_load_use_2cycle => stall_load_use_2cycle_sr1
      );
   Sr2ExecDetect : ExecForwardDetect
      PORT MAP (
         dec_sr                => dec_sr2,
         exec_dr               => exec_dr,
         exec_mem_read         => exec_wbdatamux_sel,
         exec_regwrite         => exec_regwrite,
         mem1_dr               => mem1_dr,
         mem1_mem_read         => mem1_wbdatamux_sel,
         mem1_regwrite         => mem1_regwrite,
         mem2_dr               => mem2_dr,
         mem2_regwrite         => mem2_regwrite,
         needed_for_exec       => decode_sr2_needed,
         stall_for_addr_mux    => zero,
         exec_fw_sr_sel        => exec_fw_src2_sel,
         stall_load_use_1cycle => stall_load_use_1cycle_sr2,
         stall_load_use_2cycle => stall_load_use_2cycle_sr2
      );
   U_6 : AND2
      PORT MAP (
         A => Y3,
         B => mem2_regwrite,
         F => mem2_fw_sel
      );
   U_10 : AND2
      PORT MAP (
         A => F,
         B => mem1_set_cc,
         F => cc_mem2_sel
      );
   U_18 : AND2
      PORT MAP (
         A => mem1_regwrite,
         B => mem1_wbdatamux_sel,
         F => F6
      );
   U_24 : AND2
      PORT MAP (
         A => Y5,
         B => mem2_regwrite,
         F => mem1_sr1_forward_sel_h
      );
   U_26 : AND2
      PORT MAP (
         A => Y6,
         B => mem2_regwrite,
         F => mem1_sr2_forward_sel_h
      );
   U_2 : AND3
      PORT MAP (
         A => Y1,
         B => F3,
         C => decode_trap_L,
         F => Y
      );
   U_14 : AND3
      PORT MAP (
         A => F,
         B => B,
         C => mem2_set_cc,
         F => cc_wb_sel
      );
   U_19 : AND3
      PORT MAP (
         A => decode_br,
         B => cc_mem2_sel,
         C => mem1_wbdatamux_sel,
         F => F4
      );
   U_20 : AND3
      PORT MAP (
         A => decode_br,
         B => exec_set_cc,
         C => exec_wbdatamux_sel,
         F => F5
      );
   U_0 : NAND2
      PORT MAP (
         A => Y6,
         B => mem2_regwrite,
         F => mem1_sr2_forward_sel_l
      );
   U_22 : NAND2
      PORT MAP (
         A => Y2,
         B => exec_regwrite,
         F => F7
      );
   U_27 : NAND2
      PORT MAP (
         A => Y5,
         B => mem2_regwrite,
         F => mem1_sr1_forward_sel_l
      );
   U_9 : NOR3
      PORT MAP (
         A => exec_set_cc,
         B => mem1_set_cc,
         C => mem2_set_cc,
         F => cc_no_fw
      );
   U_11 : NOT1
      PORT MAP (
         A => exec_set_cc,
         F => F
      );
   U_13 : NOT1
      PORT MAP (
         A => mem1_set_cc,
         F => B
      );
   U_16 : NOT1
      PORT MAP (
         A => decode_trap,
         F => decode_trap_L
      );
   U_1 : OR2
      PORT MAP (
         A => stall_load_use_1cycle_sr1,
         B => F1,
         F => stall_load_use_1cycle
      );
   U_3 : OR2
      PORT MAP (
         A => stall_load_use_1cycle_sr2,
         B => F4,
         F => F1
      );
   U_12 : OR2
      PORT MAP (
         A => stall_load_use_2cycle_sr2,
         B => F5,
         F => F2
      );
   U_17 : OR2
      PORT MAP (
         A => stall_load_use_2cycle_sr1,
         B => F2,
         F => stall_load_use_2cycle
      );
   U_15 : OR3
      PORT MAP (
         A => decode_wbdatamux_sel,
         B => decode_write_byte,
         C => decode_write_word,
         F => F3
      );

END struct;
