-- VHDL Entity ece411.OWordCombiner.interface
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY OWordCombiner IS
   PORT( 
      MWRITE_H : IN     std_logic;
      OWordIn  : IN     LC3b_oword;
      Offset   : IN     LC3b_L2_C_Offset;
      oword0   : IN     LC3b_oword;
      oword1   : IN     LC3b_oword;
      PWordOut : OUT    LC3b_pword
   );

-- Declarations

END OWordCombiner ;

--
-- VHDL Architecture ece411.OWordCombiner.struct
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF OWordCombiner IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F             : STD_LOGIC;
   SIGNAL PWordOut_high : LC3b_oword;
   SIGNAL PWordOut_low  : LC3b_oword;
   SIGNAL replace0      : std_logic;
   SIGNAL replace1      : std_logic;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      Y : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      A   : IN     LC3b_oword ;
      B   : IN     LC3b_oword ;
      Sel : IN     std_logic ;
      Y   : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : NOT1 USE ENTITY mp3lib.NOT1;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 3 eb3
   PWordOut <= PWordOut_high & PWordOut_low;


   -- Instance port mappings.
   AndH : AND2
      PORT MAP (
         A => MWRITE_H,
         B => F,
         Y => replace0
      );
   AndH1 : AND2
      PORT MAP (
         A => MWRITE_H,
         B => Offset,
         Y => replace1
      );
   MuxH : OWordMux2
      PORT MAP (
         A   => oword0,
         B   => OWordIn,
         Sel => replace0,
         Y   => PWordOut_low
      );
   MuxL : OWordMux2
      PORT MAP (
         A   => oword1,
         B   => OWordIn,
         Sel => replace1,
         Y   => PWordOut_high
      );
   U_0 : NOT1
      PORT MAP (
         A => Offset,
         F => F
      );

END struct;
