-- VHDL Entity ece411.BTB_Datapath.symbol
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY BTB_Datapath IS
   PORT( 
      DataOut           : IN     btb_line;
      MREAD_L           : IN     std_logic;
      MWRITE_H          : IN     std_logic;
      ReadAddress       : IN     LC3b_word;
      WriteAddress      : IN     LC3b_word;
      clk               : IN     std_logic;
      reset_l           : IN     std_logic;
      DATAIN            : OUT    btb_line;
      hit               : OUT    std_logic;
      miss              : OUT    std_logic;
      write_btb_way_out : OUT    STD_LOGIC
   );

-- Declarations

END BTB_Datapath ;

--
-- VHDL Architecture ece411.BTB_Datapath.struct
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF BTB_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F               : STD_LOGIC;
   SIGNAL MWRITE_L        : STD_LOGIC;
   SIGNAL ProtoHit        : std_logic;
   SIGNAL Protomiss       : std_logic;
   SIGNAL ReadIndex       : lc3b_c_index;
   SIGNAL ReadTag         : std_logic_vector(11 DOWNTO 0);
   SIGNAL Way0Dataout     : btb_line;
   SIGNAL Way1Dataout     : btb_line;
   SIGNAL WriteIndex      : lc3b_c_index;
   SIGNAL WriteTag        : std_logic_vector(11 DOWNTO 0);
   SIGNAL Y               : std_logic;
   SIGNAL load0           : std_logic;
   SIGNAL load1           : std_logic;
   SIGNAL lru_way         : std_logic;
   SIGNAL mem_access      : std_logic;
   SIGNAL present0        : std_logic;
   SIGNAL present1        : std_logic;
   SIGNAL write0          : std_logic;
   SIGNAL write0pg        : std_logic;
   SIGNAL write1          : std_logic;
   SIGNAL write1pg        : std_logic;
   SIGNAL write_btb_way   : std_logic;
   SIGNAL write_btb_way_l : std_logic;
   SIGNAL writegate       : std_logic;
   SIGNAL writehit0       : std_logic;
   SIGNAL writehit1       : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL hit_internal : std_logic;


   -- Component Declarations
   COMPONENT BTBLineMux2
   PORT (
      A   : IN     btb_line ;
      B   : IN     btb_line ;
      Sel : IN     std_logic ;
      Y   : OUT    btb_line 
   );
   END COMPONENT;
   COMPONENT BTB_PC_Splitter
   PORT (
      Address : IN     LC3b_word ;
      Tag     : OUT    std_logic_vector (11 DOWNTO 0);
      Index   : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT BTB_Timer
   PORT (
      clk       : IN     std_logic ;
      writegate : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BTB_Way
   PORT (
      DataIn     : IN     btb_line ;
      DataWrite  : IN     std_logic ;
      RESET_L    : IN     std_logic ;
      ReadIndex  : IN     lc3b_c_index ;
      ReadTag    : IN     std_logic_vector (11 DOWNTO 0);
      WriteIndex : IN     LC3b_c_index ;
      WriteTag   : IN     std_logic_vector (11 DOWNTO 0);
      DataOut    : OUT    btb_line ;
      Present    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Bit_Array_RW
   GENERIC (
      DELAY : Time := DELAY_256B
   );
   PORT (
      RESET_L    : IN     std_logic ;
      DataWrite  : IN     std_logic ;
      ReadIndex  : IN     LC3b_c_index ;
      WriteIndex : IN     LC3b_c_index ;
      DataIn     : IN     std_logic ;
      DataOut    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      Y : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      Y : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MUX2_1
   PORT (
      A   : IN     STD_LOGIC ;
      B   : IN     STD_LOGIC ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BTBLineMux2 USE ENTITY ece411.BTBLineMux2;
   FOR ALL : BTB_PC_Splitter USE ENTITY ece411.BTB_PC_Splitter;
   FOR ALL : BTB_Timer USE ENTITY ece411.BTB_Timer;
   FOR ALL : BTB_Way USE ENTITY ece411.BTB_Way;
   FOR ALL : Bit_Array_RW USE ENTITY ece411.Bit_Array_RW;
   FOR ALL : MUX2_1 USE ENTITY mp3lib.MUX2_1;
   FOR ALL : NAND2 USE ENTITY ece411.NAND2;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   write_btb_way <= DATAOUT.write_btb_way;


   -- Instance port mappings.
   U_3 : ENTITY ece411.AND2
      PORT MAP (
         A => ProtoHit,
         B => mem_access,
         Y => hit_internal
      );
   U_5 : ENTITY ece411.AND2
      PORT MAP (
         A => Protomiss,
         B => mem_access,
         Y => miss
      );
   U_16 : ENTITY ece411.AND2
      PORT MAP (
         A => MWRITE_H,
         B => present1,
         Y => writehit1
      );
   U_17 : ENTITY ece411.AND2
      PORT MAP (
         A => MWRITE_H,
         B => present0,
         Y => writehit0
      );
   writeAND0 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write0pg,
         Y => write0
      );
   writeAND1 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write1pg,
         Y => write1
      );
   WayDataMux : BTBLineMux2
      PORT MAP (
         A   => Way0Dataout,
         B   => Way1Dataout,
         Sel => present1,
         Y   => DATAIN
      );
   aSplitter : BTB_PC_Splitter
      PORT MAP (
         Address => ReadAddress,
         Tag     => ReadTag,
         Index   => ReadIndex
      );
   aSplitter1 : BTB_PC_Splitter
      PORT MAP (
         Address => WriteAddress,
         Tag     => WriteTag,
         Index   => WriteIndex
      );
   aTimer : BTB_Timer
      PORT MAP (
         clk       => clk,
         writegate => writegate
      );
   Way0 : BTB_Way
      PORT MAP (
         DataIn     => DataOut,
         DataWrite  => write0,
         RESET_L    => reset_l,
         ReadIndex  => ReadIndex,
         ReadTag    => ReadTag,
         WriteIndex => WriteIndex,
         WriteTag   => WriteTag,
         DataOut    => Way0Dataout,
         Present    => present0
      );
   Way1 : BTB_Way
      PORT MAP (
         DataIn     => DataOut,
         DataWrite  => write1,
         RESET_L    => reset_l,
         ReadIndex  => ReadIndex,
         ReadTag    => ReadTag,
         WriteIndex => WriteIndex,
         WriteTag   => WriteTag,
         DataOut    => Way1Dataout,
         Present    => present1
      );
   LRU : Bit_Array_RW
      GENERIC MAP (
         DELAY => DELAY_128B
      )
      PORT MAP (
         RESET_L    => reset_l,
         DataWrite  => F,
         ReadIndex  => ReadIndex,
         WriteIndex => WriteIndex,
         DataIn     => write_btb_way,
         DataOut    => lru_way
      );
   U_2 : NAND2
      PORT MAP (
         A => MREAD_L,
         B => MWRITE_L,
         Y => mem_access
      );
   U_4 : ENTITY ece411.NOT1
      PORT MAP (
         A => ProtoHit,
         Y => Protomiss
      );
   U_14 : ENTITY ece411.NOT1
      PORT MAP (
         A => lru_way,
         Y => Y
      );
   U_0 : OR2
      PORT MAP (
         A => present1,
         B => present0,
         Y => ProtoHit
      );
   U_11 : OR2
      PORT MAP (
         A => writehit1,
         B => load1,
         Y => OPEN
      );
   U_15 : OR2
      PORT MAP (
         A => writehit0,
         B => load0,
         Y => OPEN
      );
   U_1 : ENTITY mp3lib.AND2
      PORT MAP (
         A => lru_way,
         B => MWRITE_H,
         F => load0
      );
   U_6 : ENTITY mp3lib.AND2
      PORT MAP (
         A => Y,
         B => MWRITE_H,
         F => load1
      );
   U_8 : ENTITY mp3lib.AND2
      PORT MAP (
         A => MWRITE_H,
         B => writegate,
         F => F
      );
   U_10 : ENTITY mp3lib.AND2
      PORT MAP (
         A => write_btb_way_l,
         B => MWRITE_H,
         F => write0pg
      );
   U_13 : ENTITY mp3lib.AND2
      PORT MAP (
         A => write_btb_way,
         B => MWRITE_H,
         F => write1pg
      );
   U_18 : MUX2_1
      PORT MAP (
         A   => lru_way,
         B   => present1,
         SEL => hit_internal,
         F   => write_btb_way_out
      );
   U_7 : ENTITY mp3lib.NOT1
      PORT MAP (
         A => MWRITE_H,
         F => MWRITE_L
      );
   U_12 : ENTITY mp3lib.NOT1
      PORT MAP (
         A => write_btb_way,
         F => write_btb_way_l
      );

   -- Implicit buffered output assignments
   hit <= hit_internal;

END struct;
