-- VHDL Entity ece411.Control.interface
--
-- Created:
--          by - wheele11.ews (gelib-057-18.ews.illinois.edu)
--          at - 23:03:33 03/07/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Control IS
   PORT( 
      AddrParity   : IN     std_logic;
      CheckN       : IN     std_logic;
      CheckP       : IN     std_logic;
      CheckZ       : IN     std_logic;
      MRESP_H      : IN     std_logic;
      Opcode       : IN     LC3b_opcode;
      RESET_L      : IN     std_logic;
      START_H      : IN     std_logic;
      bit5         : IN     std_logic;
      clk          : IN     std_logic;
      direction    : IN     std_logic;
      n            : IN     std_logic;
      p            : IN     std_logic;
      z            : IN     std_logic;
      ALUMuxSel    : OUT    LC3b_4MUX_Sel;
      ALUSubMuxSel : OUT    std_logic;
      ALUop        : OUT    LC3b_aluop;
      DestSel      : OUT    std_logic;
      LoadIR       : OUT    std_logic;
      LoadMAR      : OUT    std_logic;
      LoadMDR      : OUT    std_logic;
      LoadNZP      : OUT    std_logic;
      LoadPC       : OUT    std_logic;
      MARMuxSel    : OUT    LC3b_4MUX_Sel;
      MDRMuxSel    : OUT    std_logic;
      MREAD_L      : OUT    std_logic;
      MWRITEH_L    : OUT    std_logic;
      MWRITEL_L    : OUT    std_logic;
      PCMuxSel     : OUT    LC3b_4MUX_SEL;
      RFMuxSel     : OUT    LC3b_8MUX_SEL;
      RegWrite     : OUT    std_logic;
      ShiftSel     : OUT    std_logic;
      StoreSR      : OUT    std_logic
   );

-- Declarations

END Control ;

--
-- VHDL Architecture ece411.Control.fsm
--
-- Created:
--          by - wheele11.ews (gelib-057-18.ews.illinois.edu)
--          at - 23:03:33 03/07/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Control IS

   TYPE STATE_TYPE IS (
      Reset,
      BR1,
      BR2,
      L_AND,
      L_NOT,
      ADD,
      Decode,
      IF1,
      IF2,
      IF3,
      CalcADDR,
      ST1,
      ST2,
      LD1,
      LD2,
      JMP,
      LEA,
      JSR1,
      JSR2,
      Trap1,
      Trap2,
      Trap3,
      LDSTI1,
      LDSTI2,
      SHF,
      CalcAddrB,
      STB20,
      LDB1,
      STB3,
      STB21,
      LDB2,
      STB1
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Reset;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      AddrParity,
      CheckN,
      CheckP,
      CheckZ,
      MRESP_H,
      Opcode,
      START_H,
      current_state,
      n,
      p,
      z
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Reset => 
            IF (START_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= Reset;
            END IF;
         WHEN BR1 => 
            IF (((n AND CheckN) OR
                 (P AND CheckP) OR
                 (z AND CheckZ)) = '1') THEN 
               next_state <= BR2;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN BR2 => 
            next_state <= IF1;
         WHEN L_AND => 
            next_state <= IF1;
         WHEN L_NOT => 
            next_state <= IF1;
         WHEN ADD => 
            next_state <= IF1;
         WHEN Decode => 
            IF (Opcode = op_br) THEN 
               next_state <= BR1;
            ELSIF ((Opcode = op_ldr) OR
                   (Opcode = op_str) OR
                   (Opcode = op_LDI) OR
                   (Opcode = op_STI)) THEN 
               next_state <= CalcADDR;
            ELSIF (Opcode = op_not) THEN 
               next_state <= L_NOT;
            ELSIF (Opcode = op_and) THEN 
               next_state <= L_AND;
            ELSIF (Opcode = op_add) THEN 
               next_state <= ADD;
            ELSIF (Opcode = op_JMP) THEN 
               next_state <= JMP;
            ELSIF (Opcode = op_LEA) THEN 
               next_state <= LEA;
            ELSIF (Opcode = op_JSR) THEN 
               next_state <= JSR1;
            ELSIF (Opcode = op_TRAP) THEN 
               next_state <= Trap1;
            ELSIF (Opcode = op_SHF) THEN 
               next_state <= SHF;
            ELSIF (Opcode = op_ldb or
                   Opcode = op_stb) THEN 
               next_state <= CalcAddrB;
            ELSE
               next_state <= IF1;
            END IF;
         WHEN IF1 => 
            next_state <= IF2;
         WHEN IF2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF3;
            ELSE
               next_state <= IF2;
            END IF;
         WHEN IF3 => 
            next_state <= Decode;
         WHEN CalcADDR => 
            IF (Opcode = op_str) THEN 
               next_state <= ST1;
            ELSIF (Opcode = op_ldr) THEN 
               next_state <= LD1;
            ELSIF (Opcode = op_LDI or
                   Opcode = op_STI) THEN 
               next_state <= LDSTI1;
            END IF;
         WHEN ST1 => 
            next_state <= ST2;
         WHEN ST2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= ST2;
            END IF;
         WHEN LD1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LD2;
            ELSE
               next_state <= LD1;
            END IF;
         WHEN LD2 => 
            next_state <= IF1;
         WHEN JMP => 
            next_state <= IF1;
         WHEN LEA => 
            next_state <= IF1;
         WHEN JSR1 => 
            next_state <= JSR2;
         WHEN JSR2 => 
            next_state <= IF1;
         WHEN Trap1 => 
            next_state <= Trap2;
         WHEN Trap2 => 
            IF (MRESP_H = '1') THEN 
               next_state <= Trap3;
            ELSE
               next_state <= Trap2;
            END IF;
         WHEN Trap3 => 
            next_state <= IF1;
         WHEN LDSTI1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDSTI2;
            ELSE
               next_state <= LDSTI1;
            END IF;
         WHEN LDSTI2 => 
            IF (Opcode = op_LDI) THEN 
               next_state <= LD1;
            ELSIF (Opcode = op_STI) THEN 
               next_state <= ST1;
            ELSE
               next_state <= LDSTI2;
            END IF;
         WHEN SHF => 
            next_state <= IF1;
         WHEN CalcAddrB => 
            IF (Opcode = op_ldb) THEN 
               next_state <= LDB1;
            ELSIF (Opcode = op_STB) THEN 
               next_state <= STB1;
            ELSE
               next_state <= CalcAddrB;
            END IF;
         WHEN STB20 => 
            next_state <= STB3;
         WHEN LDB1 => 
            IF (MRESP_H = '1') THEN 
               next_state <= LDB2;
            ELSE
               next_state <= LDB1;
            END IF;
         WHEN STB3 => 
            IF (MRESP_H = '1') THEN 
               next_state <= IF1;
            ELSE
               next_state <= STB3;
            END IF;
         WHEN STB21 => 
            next_state <= STB3;
         WHEN LDB2 => 
            next_state <= IF1;
         WHEN STB1 => 
            IF (AddrParity = '0') THEN 
               next_state <= STB20;
            ELSIF (AddrParity = '1') THEN 
               next_state <= STB21;
            ELSE
               next_state <= STB1;
            END IF;
         WHEN OTHERS =>
            next_state <= Reset;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      AddrParity,
      bit5,
      current_state,
      direction
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ALUMuxSel <= "00";
      ALUSubMuxSel <= '0';
      ALUop <= "000";
      DestSel <= '1';
      LoadIR <= '0';
      LoadMAR <= '0';
      LoadMDR <= '0';
      LoadNZP <= '0';
      LoadPC <= '0';
      MARMuxSel <= "00";
      MDRMuxSel <= '0';
      MREAD_L <= '1';
      MWRITEH_L <= '1';
      MWRITEL_L <= '1';
      PCMuxSel <= "00";
      RFMuxSel <= "000";
      RegWrite <= '0';
      ShiftSel <= '1';
      StoreSR <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN BR2 => 
            PCMuxSel <= "01";
            LoadPC <= '1';
         WHEN L_AND => 
            ALUop <= alu_and;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
            ALUMuxSel <= bit5 & '0';
         WHEN L_NOT => 
            ALUop <= alu_not;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
         WHEN ADD => 
            ALUop <= alu_add;
            RegWrite <= '1';
            LoadNZP <= '1';
            RFMuxSel <= "001";
            ALUMuxSel <= bit5 & '0';
         WHEN IF1 => 
            LoadMAR <= '1';
            LoadPC <= '1';
         WHEN IF2 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
         WHEN IF3 => 
            LoadIR <= '1';
         WHEN CalcADDR => 
            ALUMuxSel <= "01";
            ALUop <= alu_add;
            MARMuxSel <= "01";
            LoadMAR <= '1';
         WHEN ST1 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN ST2 => 
            MWRITEL_L <= '0' after 6ns;
            MWRITEH_L <= '0' after 6ns;
         WHEN LD1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LD2 => 
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN JMP => 
            LoadPC <= '1';
            PCMuxSel <= "11";
         WHEN LEA => 
            RFMuxSel <= "010";
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN JSR1 => 
            DestSel <= '0';
            RegWrite <= '1';
            RFMuxSel <= "011";
         WHEN JSR2 => 
            PCMuxSel <= "11";
            LoadPC <= '1';
         WHEN Trap1 => 
            MarMuxSel <= "11";
            LoadMAR <= '1';
            DestSel <= '0';
            RegWrite <= '1';
            RFMuxSel <= "011";
         WHEN Trap2 => 
            LoadMDR <= '1';
            MRead_L <= '0' after 6ns;
         WHEN Trap3 => 
            PCMuxSel <= "10";
            LoadPC <= '1';
         WHEN LDSTI1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6ns;
         WHEN LDSTI2 => 
            LoadMAR <= '1';
            MarMuxSel <= "10";
         WHEN SHF => 
            AluMuxSel <= "11";
            ALUop <= '1' & direction & bit5;
            LoadNZP <= '1';
            RegWrite <= '1';
            RFMuxSel <= "001";
         WHEN CalcAddrB => 
            ALUMuxSel <= "01";
            ALUop <= alu_add;
            MarMuxSel <= "01";
            LoadMAR <= '1';
            ALUSubMuxSel <= '1';
         WHEN STB20 => 
            StoreSR <= '0';
            ALUop <= alu_pass;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
         WHEN LDB1 => 
            LoadMDR <= '1';
            MREAD_L <= '0' after 6 ns;
            MDRMuxSel <= '0';
         WHEN STB3 => 
            MWRITEL_L <= AddrParity after 6ns;
            MWRITEH_L <= not AddrParity after 6ns;
         WHEN STB21 => 
            StoreSR <= '0';
            ALUop <= alu_sll;
            LoadMDR <= '1';
            MDRMuxSel <= '1';
            ShiftSel <= '0';
            ALUMuxSel <= "11";
         WHEN LDB2 => 
            RFMuxSel <= "10" & AddrParity;
            RegWrite <= '1';
            LoadNZP <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
