-- VHDL Entity ece411.LRU_8_Logic.symbol
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY LRU_8_Logic IS
   PORT( 
      line_access : IN     LRU_8_Section;
      line_in     : IN     LRU_8_Line;
      LRU_Way     : OUT    LRU_8_Section;
      line_out    : OUT    LRU_8_Line
   );

-- Declarations

END LRU_8_Logic ;

--
-- VHDL Architecture ece411.LRU_8_Logic.struct
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF LRU_8_Logic IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F           : STD_LOGIC;
   SIGNAL F1          : STD_LOGIC;
   SIGNAL inA         : std_logic;
   SIGNAL inB         : std_logic;
   SIGNAL inC         : std_logic;
   SIGNAL inD         : std_logic;
   SIGNAL inE         : std_logic;
   SIGNAL inF         : std_logic;
   SIGNAL inG         : std_logic;
   SIGNAL inH         : std_logic;
   SIGNAL new_A       : LRU_8_Section;
   SIGNAL new_B       : LRU_8_Section;
   SIGNAL new_C       : LRU_8_Section;
   SIGNAL new_D       : LRU_8_Section;
   SIGNAL new_E       : LRU_8_Section;
   SIGNAL new_F       : LRU_8_Section;
   SIGNAL new_G       : LRU_8_Section;
   SIGNAL new_H       : LRU_8_Section;
   SIGNAL read_line_A : LRU_8_Section;
   SIGNAL read_line_B : LRU_8_Section;
   SIGNAL read_line_C : LRU_8_Section;
   SIGNAL read_line_D : LRU_8_Section;
   SIGNAL read_line_E : LRU_8_Section;
   SIGNAL read_line_F : LRU_8_Section;
   SIGNAL read_line_G : LRU_8_Section;
   SIGNAL read_line_H : LRU_8_Section;
   SIGNAL shift_B     : STD_LOGIC;
   SIGNAL shift_C     : std_logic;
   SIGNAL shift_D     : STD_LOGIC;
   SIGNAL shift_E     : STD_LOGIC;
   SIGNAL shift_F     : std_logic;
   SIGNAL shift_G     : STD_LOGIC;
   SIGNAL shift_H     : STD_LOGIC;
   SIGNAL write_loc   : LRU_8_Section;
   SIGNAL write_loc_0 : std_logic;
   SIGNAL write_loc_1 : std_logic;
   SIGNAL write_loc_2 : std_logic;


   -- Component Declarations
   COMPONENT Comparator
   GENERIC (
      N     : Integer;
      Delay : time
   );
   PORT (
      A : IN     std_logic_vector (N-1 DOWNTO 0);
      B : IN     std_logic_vector (N-1 DOWNTO 0);
      Y : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Encoder_8_3
   PORT (
      A  : IN     std_logic ;
      B  : IN     std_logic ;
      C  : IN     std_logic ;
      D  : IN     std_logic ;
      E  : IN     std_logic ;
      F  : IN     std_logic ;
      G  : IN     std_logic ;
      H  : IN     std_logic ;
      F0 : OUT    std_logic ;
      F1 : OUT    std_logic ;
      F2 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Mux8_3
   PORT (
      A      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      B      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      C      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      D      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      E      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      F      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      G      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      H      : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      SEL    : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Output : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT AND2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_3
   PORT (
      A   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY mp3lib.AND2;
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : Comparator USE ENTITY ece411.Comparator;
   FOR ALL : Encoder_8_3 USE ENTITY ece411.Encoder_8_3;
   FOR ALL : MUX2_3 USE ENTITY mp3lib.MUX2_3;
   FOR ALL : Mux8_3 USE ENTITY ece411.Mux8_3;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 eb2
   shift_E <= write_loc_2;
   
   read_line_H <= line_in(23 downto 21);
   read_line_G <= line_in(20 downto 18);
   read_line_F <= line_in(17 downto 15);
   read_line_E <= line_in(14 downto 12);
   read_line_D <= line_in(11 downto 9);
   read_line_C <= line_in(8 downto 6);
   read_line_B <= line_in(5 downto 3);
   read_line_A <= line_in(2 downto 0);
   
   line_out <= new_H & new_G & new_F & new_E & new_D & new_C & new_B & new_A;
   
   LRU_Way <= line_in(23 downto 21);
   
   write_loc <= write_loc_2 & write_loc_1 & write_loc_0;


   -- Instance port mappings.
   U_1 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_H,
         B => line_access,
         Y => inH
      );
   U_2 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_G,
         B => line_access,
         Y => inG
      );
   U_3 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_F,
         B => line_access,
         Y => inF
      );
   U_4 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_E,
         B => line_access,
         Y => inE
      );
   U_5 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_D,
         B => line_access,
         Y => inD
      );
   U_9 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_C,
         B => line_access,
         Y => inC
      );
   U_11 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_B,
         B => line_access,
         Y => inB
      );
   U_13 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => read_line_A,
         B => line_access,
         Y => inA
      );
   U_0 : Encoder_8_3
      PORT MAP (
         A  => inA,
         B  => inB,
         C  => inC,
         D  => inD,
         E  => inE,
         F  => inF,
         G  => inG,
         H  => inH,
         F0 => write_loc_0,
         F1 => write_loc_1,
         F2 => write_loc_2
      );
   U_24 : Mux8_3
      PORT MAP (
         A      => read_line_A,
         B      => read_line_B,
         C      => read_line_C,
         D      => read_line_D,
         E      => read_line_E,
         F      => read_line_F,
         G      => read_line_G,
         H      => read_line_H,
         SEL    => write_loc,
         Output => new_A
      );
   U_17 : AND2
      PORT MAP (
         A => write_loc_2,
         B => write_loc_1,
         F => shift_G
      );
   U_19 : AND2
      PORT MAP (
         A => F,
         B => write_loc_2,
         F => shift_F
      );
   U_21 : AND2
      PORT MAP (
         A => write_loc_1,
         B => write_loc_0,
         F => F1
      );
   U_16 : AND3
      PORT MAP (
         A => write_loc_2,
         B => write_loc_1,
         C => write_loc_0,
         F => shift_H
      );
   U_6 : MUX2_3
      PORT MAP (
         A   => read_line_D,
         B   => read_line_C,
         SEL => shift_D,
         F   => new_D
      );
   U_7 : MUX2_3
      PORT MAP (
         A   => read_line_C,
         B   => read_line_B,
         SEL => shift_C,
         F   => new_C
      );
   U_8 : MUX2_3
      PORT MAP (
         A   => read_line_B,
         B   => read_line_A,
         SEL => shift_B,
         F   => new_B
      );
   U_10 : MUX2_3
      PORT MAP (
         A   => read_line_G,
         B   => read_line_F,
         SEL => shift_G,
         F   => new_G
      );
   U_12 : MUX2_3
      PORT MAP (
         A   => read_line_F,
         B   => read_line_E,
         SEL => shift_F,
         F   => new_F
      );
   U_14 : MUX2_3
      PORT MAP (
         A   => read_line_E,
         B   => read_line_D,
         SEL => shift_E,
         F   => new_E
      );
   U_15 : MUX2_3
      PORT MAP (
         A   => read_line_H,
         B   => read_line_G,
         SEL => shift_H,
         F   => new_H
      );
   U_18 : OR2
      PORT MAP (
         A => write_loc_1,
         B => write_loc_0,
         F => F
      );
   U_20 : OR2
      PORT MAP (
         A => F1,
         B => write_loc_2,
         F => shift_D
      );
   U_22 : OR2
      PORT MAP (
         A => write_loc_2,
         B => write_loc_1,
         F => shift_C
      );
   U_23 : OR3
      PORT MAP (
         A => write_loc_2,
         B => write_loc_1,
         C => write_loc_0,
         F => shift_B
      );

END struct;
