-- VHDL Entity ece411.L2_Cache_Datapath.symbol
--
-- Created:
--          by - one1.ews (gelib-057-16.ews.illinois.edu)
--          at - 17:57:46 04/26/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_Cache_Datapath IS
   PORT( 
      Address            : IN     LC3b_word;
      Dataout            : IN     LC3b_oword;
      MREAD_L            : IN     std_logic;
      MWRITE_L           : IN     std_logic;
      PMDATAIN           : IN     LC3B_PWORD;
      PMRESP_H           : IN     STD_LOGIC;
      clk                : IN     std_logic;
      in_idlehit         : IN     std_logic;
      in_load            : IN     std_logic;
      in_writeback       : IN     std_logic;
      reset_l            : IN     STD_LOGIC;
      DATAIN             : OUT    LC3b_oword;
      MRESP_H            : OUT    std_logic;
      PMADDRESS          : OUT    LC3B_WORD;
      PMDATAOUT          : OUT    LC3B_PWORD;
      PMRESP_H_aligned   : OUT    STD_LOGIC;
      evict_buffer_valid : OUT    std_logic;
      miss               : OUT    std_logic
   );

-- Declarations

END L2_Cache_Datapath ;

--
-- VHDL Architecture ece411.L2_Cache_Datapath.struct
--
-- Created:
--          by - one1.ews (gelib-057-16.ews.illinois.edu)
--          at - 17:57:47 04/26/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF L2_Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CacheDataOut           : LC3b_pword;
   SIGNAL DataPWord              : LC3b_pword;
   SIGNAL Dirty0                 : std_logic;
   SIGNAL Dirty1                 : std_logic;
   SIGNAL Dirty2                 : std_logic;
   SIGNAL Dirty3                 : std_logic;
   SIGNAL Dirty4                 : std_logic;
   SIGNAL Dirty5                 : std_logic;
   SIGNAL Dirty6                 : std_logic;
   SIGNAL Dirty7                 : std_logic;
   SIGNAL F                      : STD_LOGIC;
   SIGNAL F1                     : STD_LOGIC;
   SIGNAL Index                  : lc3b_l2_c_index;
   SIGNAL LRU_Way                : LRU_8_Section;
   SIGNAL LRU_Way0               : std_logic;
   SIGNAL LRU_Way1               : std_logic;
   SIGNAL LRU_Way2               : std_logic;
   SIGNAL LRU_Way3               : std_logic;
   SIGNAL LRU_Way4               : std_logic;
   SIGNAL LRU_Way5               : std_logic;
   SIGNAL LRU_Way6               : std_logic;
   SIGNAL LRU_Way7               : std_logic;
   SIGNAL LRU_data_in            : STD_LOGIC;
   SIGNAL LRUgate                : STD_LOGIC;
   SIGNAL Offset                 : LC3b_L2_C_Offset;
   SIGNAL PMDATAIN_aligned       : LC3b_pword;
   SIGNAL ProtoHit               : std_logic;
   SIGNAL Protomiss              : std_logic;
   SIGNAL Set_Dirty              : std_logic;
   SIGNAL Tag                    : lc3b_l2_c_tag;
   SIGNAL WBAddrWay0             : LC3b_word;
   SIGNAL WBAddrWay1             : LC3b_word;
   SIGNAL WBAddrWay2             : LC3b_word;
   SIGNAL WBAddrWay3             : LC3b_word;
   SIGNAL WBAddrWay4             : LC3b_word;
   SIGNAL WBAddrWay5             : LC3b_word;
   SIGNAL WBAddrWay6             : LC3b_word;
   SIGNAL WBAddrWay7             : LC3b_word;
   SIGNAL WBAddress              : LC3b_word;
   SIGNAL Way0Dataout            : LC3b_pword;
   SIGNAL Way1Dataout            : LC3b_pword;
   SIGNAL Way2Dataout            : LC3b_pword;
   SIGNAL Way3Dataout            : LC3b_pword;
   SIGNAL Way4Dataout            : LC3b_pword;
   SIGNAL Way5Dataout            : LC3b_pword;
   SIGNAL Way6Dataout            : LC3b_pword;
   SIGNAL Way7Dataout            : LC3b_pword;
   SIGNAL WayDataIn              : LC3b_pword;
   SIGNAL Y                      : std_logic;
   SIGNAL buffer_occupied_l      : std_logic;
   SIGNAL cacheline_out          : LC3B_PWORD;
   SIGNAL current_line           : LRU_8_Line;
   SIGNAL dirty                  : std_logic;
   SIGNAL en_buffer_regs         : std_logic;
   SIGNAL evicted                : std_logic;
   SIGNAL evicted_address        : LC3b_word;
   SIGNAL evicted_l              : std_logic;
   SIGNAL hit                    : std_logic;
   SIGNAL load0                  : std_logic;
   SIGNAL load1                  : std_logic;
   SIGNAL load2                  : std_logic;
   SIGNAL load3                  : std_logic;
   SIGNAL load4                  : std_logic;
   SIGNAL load5                  : std_logic;
   SIGNAL load6                  : std_logic;
   SIGNAL load7                  : std_logic;
   SIGNAL load_evict_buffer      : std_logic;
   SIGNAL load_resp              : std_logic;
   SIGNAL mem_access             : std_logic;
   SIGNAL missgate               : std_logic;
   SIGNAL not_loading            : std_logic;
   SIGNAL present0               : std_logic;
   SIGNAL present1               : std_logic;
   SIGNAL present2               : std_logic;
   SIGNAL present3               : std_logic;
   SIGNAL present4               : std_logic;
   SIGNAL present5               : std_logic;
   SIGNAL present6               : std_logic;
   SIGNAL present7               : std_logic;
   SIGNAL present_way            : std_logic_vector(2 DOWNTO 0);
   SIGNAL present_way_0          : std_logic;
   SIGNAL present_way_1          : std_logic;
   SIGNAL present_way_2          : std_logic;
   SIGNAL set_evict_buffer_valid : std_logic;
   SIGNAL three_five             : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_four             : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_one              : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_seven            : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_six              : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_three            : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_two              : std_logic_vector(2 DOWNTO 0);
   SIGNAL three_zero             : std_logic_vector(2 DOWNTO 0);
   SIGNAL truehit                : std_logic;
   SIGNAL updated_line           : LRU_8_Line;
   SIGNAL write                  : std_logic;
   SIGNAL write0                 : std_logic;
   SIGNAL write0pg               : std_logic;
   SIGNAL write1                 : std_logic;
   SIGNAL write1pg               : std_logic;
   SIGNAL write2                 : std_logic;
   SIGNAL write2pg               : std_logic;
   SIGNAL write3                 : std_logic;
   SIGNAL write3pg               : std_logic;
   SIGNAL write4                 : std_logic;
   SIGNAL write4pg               : std_logic;
   SIGNAL write5                 : std_logic;
   SIGNAL write5pg               : std_logic;
   SIGNAL write6                 : std_logic;
   SIGNAL write6pg               : std_logic;
   SIGNAL write7                 : std_logic;
   SIGNAL write7pg               : std_logic;
   SIGNAL writegate              : std_logic;
   SIGNAL writehit0              : std_logic;
   SIGNAL writehit1              : std_logic;
   SIGNAL writehit2              : std_logic;
   SIGNAL writehit3              : std_logic;
   SIGNAL writehit4              : std_logic;
   SIGNAL writehit5              : std_logic;
   SIGNAL writehit6              : std_logic;
   SIGNAL writehit7              : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL miss_internal               : std_logic;
   SIGNAL MRESP_H_internal            : std_logic;
   SIGNAL evict_buffer_valid_internal : std_logic;
   SIGNAL PMRESP_H_aligned_internal   : STD_LOGIC;


   -- Component Declarations
   COMPONENT Bit_Array
   PORT (
      DataIn    : IN     std_logic;
      DataWrite : IN     std_logic;
      Index     : IN     LC3b_c_index;
      RESET_L   : IN     std_logic;
      DataOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Comparator
   GENERIC (
      N     : Integer;
      Delay : time
   );
   PORT (
      A : IN     std_logic_vector (N-1 DOWNTO 0);
      B : IN     std_logic_vector (N-1 DOWNTO 0);
      Y : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Data_Array_L2
   PORT (
      reset_l   : IN     std_logic ;
      DataWrite : IN     std_logic ;
      Index     : IN     lc3b_l2_c_index ;
      DataIn    : IN     LRU_8_Line ;
      DataOut   : OUT    LRU_8_Line 
   );
   END COMPONENT;
   COMPONENT Encoder_8_3
   PORT (
      A  : IN     std_logic ;
      B  : IN     std_logic ;
      C  : IN     std_logic ;
      D  : IN     std_logic ;
      E  : IN     std_logic ;
      F  : IN     std_logic ;
      G  : IN     std_logic ;
      H  : IN     std_logic ;
      F0 : OUT    std_logic ;
      F1 : OUT    std_logic ;
      F2 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT EvictionBuffer1
   PORT (
      CacheDataOut           : IN     LC3b_pword ;
      WBAddress              : IN     LC3b_word ;
      clk                    : IN     std_logic ;
      load_evict_buffer      : IN     std_logic ;
      reset_l                : IN     STD_LOGIC ;
      set_evict_buffer_valid : IN     std_logic ;
      PMDATAOUT              : OUT    LC3B_PWORD ;
      evict_buffer_valid     : OUT    std_logic ;
      evicted_address        : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT LRU_8_Logic
   PORT (
      line_access : IN     LRU_8_Section ;
      line_in     : IN     LRU_8_Line ;
      LRU_Way     : OUT    LRU_8_Section ;
      line_out    : OUT    LRU_8_Line 
   );
   END COMPONENT;
   COMPONENT Mux8_1
   PORT (
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      C   : IN     std_logic ;
      D   : IN     std_logic ;
      E   : IN     std_logic ;
      F   : IN     STD_LOGIC ;
      G   : IN     std_logic ;
      H   : IN     std_logic ;
      Sel : IN     std_logic_vector (2 DOWNTO 0);
      Y   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NAND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      Y : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordSelector
   PORT (
      Input  : IN     LC3b_pword ;
      Offset : IN     LC3b_L2_C_Offset ;
      Output : OUT    LC3b_oword 
   );
   END COMPONENT;
   COMPONENT Or4
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      D : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT PDataCombiner
   PORT (
      MWRITE_L : IN     std_logic ;
      OWordIn  : IN     LC3b_oword ;
      Offset   : IN     LC3b_L2_C_Offset ;
      PWordIn  : IN     LC3b_pword ;
      PWordOut : OUT    LC3b_pword 
   );
   END COMPONENT;
   COMPONENT PWordMux2
   PORT (
      A   : IN     LC3b_pword ;
      B   : IN     LC3b_pword ;
      Sel : IN     std_logic ;
      Y   : OUT    LC3b_pword 
   );
   END COMPONENT;
   COMPONENT PWordMux8
   PORT (
      A      : IN     LC3B_PWORD ;
      B      : IN     LC3B_PWORD ;
      C      : IN     LC3B_PWORD ;
      D      : IN     LC3B_PWORD ;
      E      : IN     LC3B_PWORD ;
      F      : IN     LC3B_PWORD ;
      G      : IN     LC3B_PWORD ;
      H      : IN     LC3B_PWORD ;
      SEL    : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      Output : OUT    LC3B_PWORD 
   );
   END COMPONENT;
   COMPONENT Reg_256
   PORT (
      Clk     : IN     std_logic ;
      Data    : IN     LC3b_pword ;
      Write   : IN     std_logic ;
      DataOut : OUT    LC3b_pword 
   );
   END COMPONENT;
   COMPONENT Splitter_L2
   PORT (
      Address : IN     LC3b_word ;
      Index   : OUT    lc3b_l2_c_index ;
      Offset  : OUT    LC3b_L2_C_Offset ;
      Tag     : OUT    lc3b_l2_c_tag 
   );
   END COMPONENT;
   COMPONENT Timer_L2
   PORT (
      clk        : IN     std_logic ;
      mem_access : IN     std_logic ;
      LRUgate    : OUT    STD_LOGIC ;
      missgate   : OUT    std_logic ;
      writegate  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Way
   PORT (
      DataIn           : IN     LC3b_pword ;
      DataWrite        : IN     std_logic ;
      Index            : IN     LC3b_l2_c_index ;
      RESET_L          : IN     std_logic ;
      SetDirty         : IN     std_logic ;
      TagIn            : IN     lc3b_l2_c_tag ;
      DataOut          : OUT    LC3b_pword ;
      Dirty            : OUT    std_logic ;
      Present          : OUT    std_logic ;
      WriteBackAddress : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      in0    : IN     lc3b_word ;
      in1    : IN     lc3b_word ;
      in2    : IN     lc3b_word ;
      in3    : IN     lc3b_word ;
      in4    : IN     lc3b_word ;
      in5    : IN     lc3b_word ;
      in6    : IN     lc3b_word ;
      in7    : IN     lc3b_word ;
      sel    : IN     lc3b_8Mux_sel ;
      output : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT AND3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_1
   PORT (
      A   : IN     STD_LOGIC ;
      B   : IN     STD_LOGIC ;
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT NOR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND3 USE ENTITY mp3lib.AND3;
   FOR ALL : Bit_Array USE ENTITY ece411.Bit_Array;
   FOR ALL : Comparator USE ENTITY ece411.Comparator;
   FOR ALL : Data_Array_L2 USE ENTITY ece411.Data_Array_L2;
   FOR ALL : Encoder_8_3 USE ENTITY ece411.Encoder_8_3;
   FOR ALL : EvictionBuffer1 USE ENTITY ece411.EvictionBuffer1;
   FOR ALL : LRU_8_Logic USE ENTITY ece411.LRU_8_Logic;
   FOR ALL : MUX2_1 USE ENTITY mp3lib.MUX2_1;
   FOR ALL : Mux8_1 USE ENTITY ece411.Mux8_1;
   FOR ALL : NAND2 USE ENTITY ece411.NAND2;
   FOR ALL : NOR2 USE ENTITY mp3lib.NOR2;
   FOR ALL : OWordSelector USE ENTITY ece411.OWordSelector;
   FOR ALL : Or4 USE ENTITY ece411.Or4;
   FOR ALL : PDataCombiner USE ENTITY ece411.PDataCombiner;
   FOR ALL : PWordMux2 USE ENTITY ece411.PWordMux2;
   FOR ALL : PWordMux8 USE ENTITY ece411.PWordMux8;
   FOR ALL : REG1 USE ENTITY mp3lib.REG1;
   FOR ALL : Reg_256 USE ENTITY ece411.Reg_256;
   FOR ALL : Splitter_L2 USE ENTITY ece411.Splitter_L2;
   FOR ALL : Timer_L2 USE ENTITY ece411.Timer_L2;
   FOR ALL : Way USE ENTITY ece411.Way;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 eb2
   present_way <= present_way_2 & present_way_1 & present_way_0;

   -- HDL Embedded Text Block 3 eb3
   three_zero  <= "000";
   three_one   <= "001";
   three_two   <= "010";
   three_three <= "011";
   three_four  <= "100";
   three_five  <= "101";
   three_six   <= "110";
   three_seven <= "111";


   -- Instance port mappings.
   U_3 : ENTITY ece411.AND2
      PORT MAP (
         A => ProtoHit,
         B => mem_access,
         Y => hit
      );
   U_13 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way0,
         B => in_load,
         Y => load0
      );
   U_17 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present0,
         Y => writehit0
      );
   U_19 : ENTITY ece411.AND2
      PORT MAP (
         A => not_loading,
         B => Y,
         Y => Set_Dirty
      );
   U_28 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way1,
         B => in_load,
         Y => load1
      );
   U_29 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present1,
         Y => writehit1
      );
   U_32 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way2,
         B => in_load,
         Y => load2
      );
   U_33 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present2,
         Y => writehit2
      );
   U_36 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way3,
         B => in_load,
         Y => load3
      );
   U_37 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present3,
         Y => writehit3
      );
   U_40 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way4,
         B => in_load,
         Y => load4
      );
   U_41 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present4,
         Y => writehit4
      );
   U_44 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way5,
         B => in_load,
         Y => load5
      );
   U_45 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present5,
         Y => writehit5
      );
   U_48 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way6,
         B => in_load,
         Y => load6
      );
   U_49 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present6,
         Y => writehit6
      );
   U_52 : ENTITY ece411.AND2
      PORT MAP (
         A => LRU_Way7,
         B => in_load,
         Y => load7
      );
   U_53 : ENTITY ece411.AND2
      PORT MAP (
         A => write,
         B => present7,
         Y => writehit7
      );
   writeAND0 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write0pg,
         Y => write0
      );
   writeAND1 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write1pg,
         Y => write1
      );
   writeAND2 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write2pg,
         Y => write2
      );
   writeAND3 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write3pg,
         Y => write3
      );
   writeAND4 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write4pg,
         Y => write4
      );
   writeAND5 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write6pg,
         Y => write6
      );
   writeAND6 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write5pg,
         Y => write5
      );
   writeAND7 : ENTITY ece411.AND2
      PORT MAP (
         A => writegate,
         B => write7pg,
         Y => write7
      );
   LRU : Bit_Array
      PORT MAP (
         RESET_L   => reset_l,
         DataWrite => MRESP_H_internal,
         Index     => Index,
         DataIn    => LRU_data_in,
         DataOut   => evicted
      );
   U_14 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_zero,
         Y => LRU_Way0
      );
   U_16 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_one,
         Y => LRU_Way1
      );
   U_31 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_two,
         Y => LRU_Way2
      );
   U_35 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_three,
         Y => LRU_Way3
      );
   U_39 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_four,
         Y => LRU_Way4
      );
   U_43 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_five,
         Y => LRU_Way5
      );
   U_47 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_six,
         Y => LRU_Way6
      );
   U_51 : Comparator
      GENERIC MAP (
         N     => 3,
         Delay => DELAY_COMPARE8
      )
      PORT MAP (
         A => LRU_Way,
         B => three_seven,
         Y => LRU_Way7
      );
   L2_LRU : Data_Array_L2
      PORT MAP (
         reset_l   => reset_l,
         DataWrite => MRESP_H_internal,
         Index     => Index,
         DataIn    => updated_line,
         DataOut   => current_line
      );
   PresentEncoder : Encoder_8_3
      PORT MAP (
         A  => present0,
         B  => present1,
         C  => present2,
         D  => present3,
         E  => present4,
         F  => present5,
         G  => present6,
         H  => present7,
         F0 => present_way_0,
         F1 => present_way_1,
         F2 => present_way_2
      );
   aEvictionBuffer : EvictionBuffer1
      PORT MAP (
         CacheDataOut           => CacheDataOut,
         WBAddress              => WBAddress,
         clk                    => clk,
         load_evict_buffer      => load_evict_buffer,
         reset_l                => reset_l,
         set_evict_buffer_valid => set_evict_buffer_valid,
         PMDATAOUT              => PMDATAOUT,
         evict_buffer_valid     => evict_buffer_valid_internal,
         evicted_address        => evicted_address
      );
   U_23 : LRU_8_Logic
      PORT MAP (
         line_access => present_way,
         line_in     => current_line,
         LRU_Way     => LRU_Way,
         line_out    => updated_line
      );
   U_55 : Mux8_1
      PORT MAP (
         A   => Dirty0,
         B   => Dirty1,
         C   => Dirty2,
         D   => Dirty3,
         E   => Dirty4,
         F   => Dirty5,
         G   => Dirty6,
         H   => Dirty7,
         Sel => LRU_Way,
         Y   => dirty
      );
   U_2 : NAND2
      PORT MAP (
         A => MREAD_L,
         B => MWRITE_L,
         Y => mem_access
      );
   U_4 : ENTITY ece411.NOT1
      PORT MAP (
         A => ProtoHit,
         Y => Protomiss
      );
   U_20 : ENTITY ece411.NOT1
      PORT MAP (
         A => in_load,
         Y => not_loading
      );
   U_58 : ENTITY ece411.NOT1
      PORT MAP (
         A => MWRITE_L,
         Y => write
      );
   U_15 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit0,
         B => load0,
         Y => write0pg
      );
   U_21 : ENTITY ece411.OR2
      PORT MAP (
         A => dirty,
         B => write,
         Y => Y
      );
   U_30 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit1,
         B => load1,
         Y => write1pg
      );
   U_34 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit2,
         B => load2,
         Y => write2pg
      );
   U_38 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit3,
         B => load3,
         Y => write3pg
      );
   U_42 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit4,
         B => load4,
         Y => write4pg
      );
   U_46 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit5,
         B => load5,
         Y => write5pg
      );
   U_50 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit6,
         B => load6,
         Y => write6pg
      );
   U_54 : ENTITY ece411.OR2
      PORT MAP (
         A => writehit7,
         B => load7,
         Y => write7pg
      );
   U_57 : ENTITY ece411.OR2
      PORT MAP (
         A => PMRESP_H,
         B => in_idlehit,
         Y => en_buffer_regs
      );
   WordSelect : OWordSelector
      PORT MAP (
         Input  => cacheline_out,
         Offset => Offset,
         Output => DATAIN
      );
   U_11 : Or4
      PORT MAP (
         A => present0,
         B => present1,
         C => present2,
         D => present3,
         F => F
      );
   U_12 : Or4
      PORT MAP (
         A => present4,
         B => present5,
         C => present6,
         D => present7,
         F => F1
      );
   U_7 : PDataCombiner
      PORT MAP (
         MWRITE_L => MWRITE_L,
         OWordIn  => Dataout,
         Offset   => Offset,
         PWordIn  => cacheline_out,
         PWordOut => WayDataIn
      );
   WayDataMux1 : PWordMux2
      PORT MAP (
         A   => DataPWord,
         B   => PMDATAIN_aligned,
         Sel => in_load,
         Y   => cacheline_out
      );
   PMDataMux : PWordMux8
      PORT MAP (
         A      => Way0Dataout,
         B      => Way1Dataout,
         C      => Way1Dataout,
         D      => Way1Dataout,
         E      => Way1Dataout,
         F      => Way1Dataout,
         G      => Way1Dataout,
         H      => Way1Dataout,
         SEL    => LRU_Way,
         Output => CacheDataOut
      );
   WayDataMux : PWordMux8
      PORT MAP (
         A      => Way0Dataout,
         B      => Way1Dataout,
         C      => Way2Dataout,
         D      => Way3Dataout,
         E      => Way4Dataout,
         F      => Way5Dataout,
         G      => Way6Dataout,
         H      => Way7Dataout,
         SEL    => present_way,
         Output => DataPWord
      );
   U_56 : Reg_256
      PORT MAP (
         Clk     => clk,
         Data    => PMDATAIN,
         Write   => en_buffer_regs,
         DataOut => PMDATAIN_aligned
      );
   aSplitter : Splitter_L2
      PORT MAP (
         Address => Address,
         Index   => Index,
         Offset  => Offset,
         Tag     => Tag
      );
   aTimer : Timer_L2
      PORT MAP (
         clk        => clk,
         mem_access => mem_access,
         LRUgate    => LRUgate,
         missgate   => missgate,
         writegate  => writegate
      );
   Way0 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write0,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way0Dataout,
         Dirty            => Dirty0,
         Present          => present0,
         WriteBackAddress => WBAddrWay0
      );
   Way1 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write1,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way1Dataout,
         Dirty            => Dirty1,
         Present          => present1,
         WriteBackAddress => WBAddrWay1
      );
   Way2 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write2,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way2Dataout,
         Dirty            => Dirty2,
         Present          => present2,
         WriteBackAddress => WBAddrWay2
      );
   Way3 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write3,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way3Dataout,
         Dirty            => Dirty3,
         Present          => present3,
         WriteBackAddress => WBAddrWay3
      );
   Way4 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write4,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way4Dataout,
         Dirty            => Dirty4,
         Present          => present4,
         WriteBackAddress => WBAddrWay4
      );
   Way5 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write5,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way5Dataout,
         Dirty            => Dirty5,
         Present          => present5,
         WriteBackAddress => WBAddrWay5
      );
   Way6 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write6,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way6Dataout,
         Dirty            => Dirty6,
         Present          => present6,
         WriteBackAddress => WBAddrWay6
      );
   Way7 : Way
      PORT MAP (
         DataIn           => WayDataIn,
         DataWrite        => write7,
         Index            => Index,
         RESET_L          => reset_l,
         SetDirty         => Set_Dirty,
         TagIn            => Tag,
         DataOut          => Way7Dataout,
         Dirty            => Dirty7,
         Present          => present7,
         WriteBackAddress => WBAddrWay7
      );
   U_1 : WordMux2
      PORT MAP (
         A   => evicted_address,
         B   => Address,
         Sel => in_load,
         F   => PMADDRESS
      );
   U_6 : WordMux8
      PORT MAP (
         in0    => WBAddrWay0,
         in1    => WBAddrWay1,
         in2    => WBAddrWay2,
         in3    => WBAddrWay3,
         in4    => WBAddrWay4,
         in5    => WBAddrWay5,
         in6    => WBAddrWay6,
         in7    => WBAddrWay7,
         sel    => LRU_Way,
         output => WBAddress
      );
   U_25 : ENTITY mp3lib.AND2
      PORT MAP (
         A => in_load,
         B => PMRESP_H_aligned_internal,
         F => load_resp
      );
   U_5 : AND3
      PORT MAP (
         A => Protomiss,
         B => mem_access,
         C => missgate,
         F => miss_internal
      );
   U_8 : AND3
      PORT MAP (
         A => in_idlehit,
         B => miss_internal,
         C => dirty,
         F => load_evict_buffer
      );
   U_9 : AND3
      PORT MAP (
         A => LRUgate,
         B => hit,
         C => not_loading,
         F => truehit
      );
   U_26 : MUX2_1
      PORT MAP (
         A   => present0,
         B   => evicted_l,
         SEL => in_load,
         F   => LRU_data_in
      );
   U_10 : NOR2
      PORT MAP (
         A => buffer_occupied_l,
         B => in_writeback,
         F => set_evict_buffer_valid
      );
   U_22 : NOR2
      PORT MAP (
         A => evict_buffer_valid_internal,
         B => load_evict_buffer,
         F => buffer_occupied_l
      );
   U_27 : ENTITY mp3lib.NOT1
      PORT MAP (
         A => evicted,
         F => evicted_l
      );
   U_0 : ENTITY mp3lib.OR2
      PORT MAP (
         A => F,
         B => F1,
         F => ProtoHit
      );
   U_24 : ENTITY mp3lib.OR2
      PORT MAP (
         A => truehit,
         B => load_resp,
         F => MRESP_H_internal
      );
   U_18 : REG1
      PORT MAP (
         RESET_L => reset_l,
         A       => PMRESP_H,
         EN      => en_buffer_regs,
         CLK     => clk,
         F       => PMRESP_H_aligned_internal
      );

   -- Implicit buffered output assignments
   miss               <= miss_internal;
   MRESP_H            <= MRESP_H_internal;
   evict_buffer_valid <= evict_buffer_valid_internal;
   PMRESP_H_aligned   <= PMRESP_H_aligned_internal;

END struct;
