-- VHDL Entity ece411.decodeStage.interface
--
-- Created:
--          by - one1.ews (gelib-057-06.ews.illinois.edu)
--          at - 17:05:42 03/29/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY decodeStage IS
   PORT( 
      CLK                : IN     std_logic;
      RESET_L            : IN     STD_LOGIC;
      decode_data_in     : IN     pipe_data;
      decode_instr       : IN     STD_LOGIC_VECTOR (15 DOWNTO 0);
      decode_pc          : IN     LC3b_word;
      wb_cc              : IN     LC3b_cc;
      wb_dest            : IN     LC3B_REG;
      wb_din             : IN     LC3B_WORD;
      wb_load_cc         : IN     std_logic;
      wb_rw              : IN     STD_LOGIC;
      decode_control_out : OUT    control_word;
      decode_data_out    : OUT    pipe_data
   );

-- Declarations

END decodeStage ;

--
-- VHDL Architecture ece411.decodeStage.struct
--
-- Created:
--          by - one1.ews (gelib-057-06.ews.illinois.edu)
--          at - 17:05:42 03/29/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF decodeStage IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL F            : STD_LOGIC;
   SIGNAL R7           : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL SrcA         : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL SrcAMuxOut   : STD_LOGIC_VECTOR(2 DOWNTO 0);
   SIGNAL SrcAMuxSel   : STD_LOGIC;
   SIGNAL SrcB         : LC3B_REG;
   SIGNAL SrcBMuxOut   : LC3B_REG;
   SIGNAL SrcBMuxSel   : STD_LOGIC;
   SIGNAL bit11        : std_logic;
   SIGNAL bit5         : std_logic;
   SIGNAL decode_ben   : STD_LOGIC;
   SIGNAL decode_src_a : LC3B_WORD;
   SIGNAL decode_src_b : LC3B_WORD;
   SIGNAL direction    : std_logic;
   SIGNAL dr           : LC3b_reg;
   SIGNAL imm4         : LC3b_imm4;
   SIGNAL imm5         : LC3b_imm5;
   SIGNAL index6       : LC3b_index6;
   SIGNAL instr        : LC3b_word;
   SIGNAL load_jump_pc : STD_LOGIC;
   SIGNAL n            : std_logic;
   SIGNAL n_match      : std_logic;
   SIGNAL offset11     : LC3b_offset11;
   SIGNAL offset9      : LC3b_offset9;
   SIGNAL op_add       : STD_LOGIC;
   SIGNAL op_and       : STD_LOGIC;
   SIGNAL op_br        : STD_LOGIC;
   SIGNAL op_jsr       : STD_LOGIC;
   SIGNAL op_ldb       : STD_LOGIC;
   SIGNAL op_ldi       : STD_LOGIC;
   SIGNAL op_ldr       : STD_LOGIC;
   SIGNAL op_lea       : STD_LOGIC;
   SIGNAL op_not       : STD_LOGIC;
   SIGNAL op_ret       : STD_LOGIC;
   SIGNAL op_shf       : STD_LOGIC;
   SIGNAL op_stb       : STD_LOGIC;
   SIGNAL op_sti       : STD_LOGIC;
   SIGNAL op_str       : STD_LOGIC;
   SIGNAL op_trap      : STD_LOGIC;
   SIGNAL opcode       : LC3b_opcode;
   SIGNAL p            : std_logic;
   SIGNAL p_match      : std_logic;
   SIGNAL trapvec8     : LC3b_trapvect8;
   SIGNAL z            : std_logic;
   SIGNAL z_match      : std_logic;


   -- Component Declarations
   COMPONENT Control_ROM
   PORT (
      bit11     : IN     std_logic;
      bit4      : IN     std_logic;
      bit5      : IN     std_logic;
      opcode    : IN     LC3b_opcode;
      ctrl_word : OUT    control_word
   );
   END COMPONENT;
   COMPONENT Dec4_16
   PORT (
      A : IN     STD_LOGIC_VECTOR (3 DOWNTO 0);
      F : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT ID
   PORT (
      decode_instr : IN     LC3b_word ;
      Opcode       : OUT    LC3b_opcode ;
      SrcA         : OUT    LC3b_reg ;
      SrcB         : OUT    LC3b_reg ;
      dest         : OUT    LC3b_reg ;
      index6       : OUT    LC3b_index6 ;
      imm5         : OUT    LC3b_imm5 ;
      bit5         : OUT    std_logic ;
      offset9      : OUT    LC3b_offset9 ;
      trapvec8     : OUT    LC3b_trapvect8 ;
      offset11     : OUT    LC3b_offset11 ;
      bit11        : OUT    std_logic ;
      imm4         : OUT    LC3b_imm4 ;
      direction    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      clk      : IN     std_logic ;
      wb_cc    : IN     LC3b_cc ;
      load_nzp : IN     std_logic ;
      RESET_L  : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Or4
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      D : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT MUX2_3
   PORT (
      A   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      B   : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      SEL : IN     STD_LOGIC ;
      F   : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT OR3
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      C : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REGFILE
   PORT (
      CLK      : IN     STD_LOGIC ;
      DEST     : IN     LC3B_REG ;
      DIN      : IN     LC3B_WORD ;
      RESET_L  : IN     STD_LOGIC ;
      REGWRITE : IN     STD_LOGIC ;
      SRCA     : IN     LC3B_REG ;
      SRCB     : IN     LC3B_REG ;
      A        : OUT    LC3B_WORD ;
      B        : OUT    LC3B_WORD 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Control_ROM USE ENTITY ece411.Control_ROM;
   FOR ALL : Dec4_16 USE ENTITY ece411.Dec4_16;
   FOR ALL : ID USE ENTITY ece411.ID;
   FOR ALL : MUX2_3 USE ENTITY mp3lib.MUX2_3;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : OR3 USE ENTITY mp3lib.OR3;
   FOR ALL : Or4 USE ENTITY ece411.Or4;
   FOR ALL : REGFILE USE ENTITY mp3lib.REGFILE;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   op_br   <= instr(0);
   op_add  <= instr(1);
   op_ldb  <= instr(2);
   op_stb  <= instr(3);
   op_jsr  <= instr(4);
   op_and  <= instr(5);
   op_ldr  <= instr(6);
   op_str  <= instr(7);
   -- op_rti
   op_not  <= instr(9);
   op_ldi  <= instr(10);
   op_sti  <= instr(11);
   op_ret  <= instr(12);
   op_shf  <= instr(13);
   op_lea  <= instr(14);
   op_trap <= instr(15);

   -- HDL Embedded Text Block 2 eb2
   SrcAMuxSel <= op_jsr;
   R7 <= "111";

   -- HDL Embedded Text Block 8 eb8
   decode_data_out <= decode_data_in;
   decode_data_out.imm4         <= imm4;
   decode_data_out.imm5         <= imm5;
   decode_data_out.idx6         <= index6;
   decode_data_out.off9         <= offset9;
   decode_data_out.off11        <= offset11;
   decode_data_out.sr1_val      <= decode_src_a;
   decode_data_out.sr2_val      <= decode_src_b;
   decode_data_out.dr           <= dr;
   decode_data_out.sr1          <= SrcAMuxOut;
   decode_data_out.sr2          <= SrcBMuxOut;
   decode_data_out.load_jump_pc <= load_jump_pc;


   -- Instance port mappings.
   U_38 : ENTITY ece411.AND2
      PORT MAP (
         A => decode_instr(11),
         B => n,
         Y => n_match
      );
   U_39 : ENTITY ece411.AND2
      PORT MAP (
         A => decode_instr(10),
         B => z,
         Y => z_match
      );
   U_40 : ENTITY ece411.AND2
      PORT MAP (
         A => decode_instr(9),
         B => p,
         Y => p_match
      );
   U_6 : Control_ROM
      PORT MAP (
         opcode    => opcode,
         bit11     => bit11,
         bit5      => bit5,
         bit4      => decode_instr(3),
         ctrl_word => decode_control_out
      );
   opcodeDecoder : Dec4_16
      PORT MAP (
         A => opcode,
         F => instr
      );
   IDUnit : ID
      PORT MAP (
         decode_instr => decode_instr,
         Opcode       => opcode,
         SrcA         => SrcA,
         SrcB         => SrcB,
         dest         => dr,
         index6       => index6,
         imm5         => imm5,
         bit5         => bit5,
         offset9      => offset9,
         trapvec8     => trapvec8,
         offset11     => offset11,
         bit11        => bit11,
         imm4         => imm4,
         direction    => direction
      );
   U_35 : NZP
      PORT MAP (
         clk      => CLK,
         wb_cc    => wb_cc,
         load_nzp => wb_load_cc,
         RESET_L  => RESET_L,
         n        => n,
         p        => p,
         z        => z
      );
   U_3 : Or4
      PORT MAP (
         A => F,
         B => op_ret,
         C => op_jsr,
         D => op_trap,
         F => load_jump_pc
      );
   U_2 : ENTITY mp3lib.AND2
      PORT MAP (
         A => decode_ben,
         B => op_br,
         F => F
      );
   U_0 : MUX2_3
      PORT MAP (
         A   => SrcA,
         B   => R7,
         SEL => SrcAMuxSel,
         F   => SrcAMuxOut
      );
   U_1 : MUX2_3
      PORT MAP (
         A   => SrcB,
         B   => dr,
         SEL => SrcBMuxSel,
         F   => SrcBMuxOut
      );
   U_41 : OR3
      PORT MAP (
         A => n_match,
         B => z_match,
         C => p_match,
         F => decode_ben
      );
   U_43 : OR3
      PORT MAP (
         A => op_stb,
         B => op_sti,
         C => op_str,
         F => SrcBMuxSel
      );
   aRF : REGFILE
      PORT MAP (
         CLK      => CLK,
         DEST     => wb_dest,
         DIN      => wb_din,
         RESET_L  => RESET_L,
         REGWRITE => wb_rw,
         SRCA     => SrcAMuxOut,
         SRCB     => SrcBMuxOut,
         A        => decode_src_a,
         B        => decode_src_b
      );

END struct;
