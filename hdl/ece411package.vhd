--
-- COMPONENT : LC3B_TYPES
--
-- GENERATED BY SYSTEM ARCHITECT VERSION V8.4_3.7
-- EDITED BY MATT ZAVISLAK FOR ECE 312 MP3 ON NOVEMBER 10, 2000
-- VERSION 2.0
-- EDITED BY DANIEL MANJARRES FOR ECE 411 JANUARY 2010
--
LIBRARY IEEE ;
USE IEEE.STD_LOGIC_1164.ALL;

PACKAGE LC3B_TYPES IS
-- DATAPATH SIGNAL WIDTHS
	SUBTYPE LC3B_PWORD     IS STD_LOGIC_VECTOR(255 DOWNTO 0);  --"POLY" WORD
	SUBTYPE LC3B_OWORD     IS STD_LOGIC_VECTOR(127 DOWNTO 0);  --OCTAL WORD
	SUBTYPE LC3B_QWORD     IS STD_LOGIC_VECTOR(63 DOWNTO 0);  --QUAD WORD
	SUBTYPE LC3B_DWORD     IS STD_LOGIC_VECTOR(31 DOWNTO 0);  --DOUBLE WORD
	SUBTYPE LC3B_WORD      IS STD_LOGIC_VECTOR(15 DOWNTO 0);
	SUBTYPE LC3B_BYTE      IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_NIBBLE    IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_CC        IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_REG       IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_ALUOP     IS STD_LOGIC_VECTOR(2 DOWNTO 0);
	SUBTYPE LC3B_SHFTOP    IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_IMM4      IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_IMM5      IS STD_LOGIC_VECTOR(4 DOWNTO 0);
	SUBTYPE LC3B_OFFSET9   IS STD_LOGIC_VECTOR(8 DOWNTO 0);
	SUBTYPE LC3B_OFFSET11  IS STD_LOGIC_VECTOR(10 DOWNTO 0);
	SUBTYPE LC3B_INDEX6    IS STD_LOGIC_VECTOR(5 DOWNTO 0);
	SUBTYPE LC3B_TRAPVECT8 IS STD_LOGIC_VECTOR(7 DOWNTO 0);
	SUBTYPE LC3B_OPCODE    IS STD_LOGIC_VECTOR(3 DOWNTO 0);
	SUBTYPE LC3B_4MUX_SEL  IS STD_LOGIC_VECTOR(1 DOWNTO 0);
	SUBTYPE LC3B_8MUX_SEL  IS STD_LOGIC_VECTOR(2 DOWNTO 0);
  SUBTYPE LC3B_3DECODE   IS STD_LOGIC_VECTOR(2 DOWNTO 0);
--CACHE SIGNALS (ADD MORE TO ME!!)
  SUBTYPE LC3B_C_OFFSET  IS STD_LOGIC_VECTOR(3 DOWNTO 0);
  SUBTYPE LC3B_C_INDEX   IS STD_LOGIC_VECTOR(2 DOWNTO 0);
  SUBTYPE LC3B_C_TAG     IS STD_LOGIC_VECTOR(8 DOWNTO 0);
  subtype lc3b_alumux_sel  is std_logic_vector(1 downto 0);

	TYPE MEMORY_ARRAY_64K IS ARRAY (0 TO 65535) OF LC3B_BYTE;
	
	TYPE OPNAME IS (add_op, and_op, not_op, pass_op, sll_op, srl_op, sra_op, bad_op);
	TYPE EX_CONTROL IS RECORD
	    aluop : LC3B_ALUOP;
	END RECORD;
	
	-- ALU OP DEFINITIONS
	CONSTANT ALU_ADD  : LC3B_ALUOP := "000";
	CONSTANT ALU_AND  : LC3B_ALUOP := "001";
	CONSTANT ALU_NOT  : LC3B_ALUOP := "010";
	CONSTANT ALU_PASS : LC3B_ALUOP := "011";
	CONSTANT ALU_SLL  : LC3B_ALUOP := "100";
	CONSTANT ALU_SLA  : LC3B_ALUOP := "101";
	CONSTANT ALU_SRL  : LC3B_ALUOP := "110";
	CONSTANT ALU_SRA  : LC3B_ALUOP := "111";

	-- SHIFTER OP DEFINITIONS
	CONSTANT SHFT_SLL : LC3B_SHFTOP := "10";
	CONSTANT SHFT_SRL : LC3B_SHFTOP := "01";
	CONSTANT SHFT_SRA : LC3B_SHFTOP := "11";

	-- INSTRUCTION DEFINITIONS
	CONSTANT OP_ADD  : LC3B_OPCODE := "0001";
	CONSTANT OP_AND  : LC3B_OPCODE := "0101";
	CONSTANT OP_BR   : LC3B_OPCODE := "0000";
	CONSTANT OP_JSR  : LC3B_OPCODE := "0100";
	CONSTANT OP_JMP  : LC3B_OPCODE := "1100";
	CONSTANT OP_LDR  : LC3B_OPCODE := "0110";
	CONSTANT OP_LDB  : LC3B_OPCODE := "0010";
	CONSTANT OP_LDI  : LC3B_OPCODE := "1010";
	CONSTANT OP_LEA  : LC3B_OPCODE := "1110";
	CONSTANT OP_NOT  : LC3B_OPCODE := "1001";
	CONSTANT OP_RET  : LC3B_OPCODE := "1100";
	CONSTANT OP_RTI  : LC3B_OPCODE := "1000";
	CONSTANT OP_SHF  : LC3B_OPCODE := "1101";
	CONSTANT OP_STR  : LC3B_OPCODE := "0111";
	CONSTANT OP_STB  : LC3B_OPCODE := "0011";
	CONSTANT OP_STI  : LC3B_OPCODE := "1011";
	CONSTANT OP_TRAP : LC3B_OPCODE := "1111";

	-- TIME DELAYS **********
	-- CHANGED FOR FALL 2009: ALU, ADDER, SHIFTER DELAYS
	CONSTANT HALF_CLOCK_PERIOD  : TIME := 25 NS;
	CONSTANT CLOCK_PERIOD       : TIME := (HALF_CLOCK_PERIOD + HALF_CLOCK_PERIOD);
	CONSTANT DELAY_LOGIC2       : TIME := 1 NS;
	CONSTANT DELAY_LOGIC3       : TIME := 2 NS;
	CONSTANT DELAY_LOGIC4       : TIME := 2 NS;
	CONSTANT DELAY_MUX2         : TIME := 2 NS;
	CONSTANT DELAY_MUX4         : TIME := 4 NS;
	CONSTANT DELAY_MUX8         : TIME := 6 NS;
	CONSTANT DELAY_DECODE3      : TIME := 6 NS;
	CONSTANT DELAY_GENCC        : TIME := 6 NS;
	CONSTANT DELAY_ALU          : TIME := 15 NS;
	CONSTANT DELAY_ADDER        : TIME := 12 NS;
	CONSTANT DELAY_SHIFTER      : TIME := 10 NS;
	CONSTANT DELAY_REGFILE_READ : TIME := 7 NS;
	CONSTANT DELAY_REG          : TIME := 5 NS;
	CONSTANT DELAY_COMPARE8     : TIME := 3 NS;
	CONSTANT DELAY_COMPARE16    : TIME := 4 NS;

	--DELAYS FOR DATA ARRAYS
	CONSTANT DELAY_128B : TIME := 14 NS;
	CONSTANT DELAY_256B : TIME := 20 NS;
	CONSTANT DELAY_512B : TIME := 25 NS;
	CONSTANT DELAY_1KB  : TIME := 35 NS;
	CONSTANT DELAY_2KB  : TIME := 45 NS;
	CONSTANT DELAY_4KB  : TIME := 60 NS;

	--DELAY FOR CONTROL ROM
	CONSTANT DELAY_ROM : TIME := 3 NS;
	
	--DELAYS FOR DRAM.
	CONSTANT DELAY_MP1_MEM  : TIME := 50 NS;
	CONSTANT DELAY_MP2_MEM  : TIME := 500 NS;
	CONSTANT DELAY_MP22_MEM : TIME := 500 NS;
	CONSTANT DELAY_16B_MEM  : TIME := 500 NS;
	CONSTANT DELAY_32B_MEM  : TIME := 510 NS;
	CONSTANT DELAY_64B_MEM  : TIME := 530 NS;
	CONSTANT DELAY_128B_MEM : TIME := 570 NS;
	CONSTANT DELAY_256B_MEM : TIME := 650 NS;

	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K);

	CONSTANT alumux_sr2  : LC3B_4MUX_SEL := "00";
	CONSTANT alumux_srbb : LC3B_4MUX_SEL := "01";
	CONSTANT alumux_imm5 : LC3B_4MUX_SEL := "10";
	CONSTANT alumux_idx6 : LC3B_4MUX_SEL := "11";

	SUBTYPE uop_rom_sel IS std_logic_vector(3 downto 0);
	CONSTANT uop_rom_idx_default : uop_rom_sel := "0000";

	TYPE dec_control_word IS RECORD
		ldi           : std_logic;
		sti           : std_logic;
		use_uop2      : std_logic;
		override_dr   : std_logic;
		dr_override   : LC3b_reg;
		uop_rom_idx   : uop_rom_sel;
	END RECORD;

	TYPE exec_control_word IS RECORD
		alumux_sel    : lc3b_alumux_sel;
		aluop         : lc3b_aluop;
		shift_imm     : std_logic;
		use_offset11  : std_logic;
		use_pc_adder  : std_logic;
		srcamux_sel   : std_logic;
		srcbbmux_sel  : std_logic;
	END RECORD;

	TYPE mem_control_word IS RECORD
		mem_read       : std_logic;
		mem_read_byte  : std_logic;
		mem_write_byte : std_logic;
		mem_write_word : std_logic;
	END RECORD;

	TYPE wb_control_word IS RECORD
		set_cc    : std_logic;
		regwrite  : std_logic;
	END RECORD;

	TYPE pipe_data IS RECORD
		pc           : lc3b_word;
		incr_pc      : lc3b_word;
		instr        : lc3b_word;
		aluout       : lc3b_word;
		mem_data_in  : lc3b_word;
		sr1_val      : lc3b_word;
		sr2_val      : lc3b_word;
		dr_val       : lc3b_word;
		sr1          : LC3b_reg;
		sr2          : LC3b_reg;
		dr           : lc3b_reg;
		imm4         : LC3b_imm4;
		imm5         : LC3B_IMM5;
		idx6         : LC3B_INDEX6;
		off9         : LC3B_OFFSET9;
		off11        : LC3B_OFFSET11;
		load_jump_pc : std_logic;
	END RECORD;

	constant pipe_data_length : integer := 12;
	type pipe_data_sizes_array is array (0 to pipe_data_length - 1) of integer;
	constant pipe_data_sizes : pipe_data_sizes_array := (
		16, 16, 16, 16, 16, 3, 4, 5, 6, 9, 11, 1
	);

	TYPE control_word IS RECORD
		dec   : dec_control_word;
		exec  : exec_control_word;
		mem   : mem_control_word;
		wb    : wb_control_word;
		op    : LC3b_opcode;
		pc    : LC3b_word;
		instr : LC3b_word;
	END RECORD;

	CONSTANT default_dec_control : dec_control_word := (
		ldi           => '0',
		sti           => '0',
		use_uop2      => '0',
		override_dr   => '0',
		dr_override   => "XXXX",
		uop_rom_idx   => uop_rom_idx_default
	);

	CONSTANT logic_mem_control : mem_control_word := (
		mem_read       => '0',
		mem_read_byte  => '0',
		mem_write_word => '0',
		mem_write_byte => '0'
	);

	CONSTANT logic_wb_control : wb_control_word := (
		set_cc   => '1',
		regwrite => '1'
	);

  CONSTANT zero_wb_control : wb_control_word := (
	  set_cc   => '0',
	  regwrite => '0'
  );

	CONSTANT default_pipe_data : pipe_data := (
		pc           => "XXXXXXXXXXXXXXXX",
		incr_pc      => "XXXXXXXXXXXXXXXX",
		instr        => "0000000000000000",
		aluout       => "XXXXXXXXXXXXXXXX",
		mem_data_in  => "XXXXXXXXXXXXXXXX",
		sr1          => "XXXX",
		sr2          => "XXXX",
		sr1_val      => "XXXXXXXXXXXXXXXX",
		sr2_val      => "XXXXXXXXXXXXXXXX",
		dr_val       => "XXXXXXXXXXXXXXXX",
		dr           => "XXXX",
		imm4         => "XXXX",
		imm5         => "XXXXX",
		idx6         => "XXXXXX",
		off9         => "XXXXXXXXX",
		off11        => "XXXXXXXXXXX",
		load_jump_pc => '0'
	);

	CONSTANT test_pipe_data : pipe_data := (
		pc           => "XXXXXXXXXXXXXXXX",
		incr_pc      => "XXXXXXXXXXXXXXXX",
		instr        => "XXXXXXXXXXXXXXXX",
		aluout       => "1010101000101011",
		mem_data_in  => "XXXXXXXXXXXXXXXX",
		sr1          => "XXXX",
		sr2          => "XXXX",
		sr1_val      => "1000111010111001",
		sr2_val      => "XXXXXXXXXXXXXXXX",
		dr_val       => "XXXXXXXXXXXXXXXX",
		dr           => "0010",
		imm4         => "XXXX",
		imm5         => "XXXXX",
		idx6         => "XXXXXX",
		off9         => "010101001",
		off11        => "XXXXXXXXXXX",
		load_jump_pc => '1'
	);

	CONSTANT default_control_word : control_word := (
		dec   => default_dec_control,
		exec  => (
			alumux_sel     => "XX",
			aluop          => "XXX",
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => 'X',
			srcbbmux_sel   => 'X'
		), mem => logic_mem_control
		,  wb => zero_wb_control
		,  op    => "0000"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "Opcode & Bit11 & Bit5 & Bit 4"
	-- "0001X0X"
	CONSTANT add_reg_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_sr2,
			aluop          => ALU_ADD,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "0001"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0001X1X"
	CONSTANT add_imm_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_imm5,
			aluop          => ALU_ADD,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "0001"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0101X0X"
	CONSTANT and_reg_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_sr2,
			aluop          => ALU_AND,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "0101"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0101X1X"
	CONSTANT and_imm_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_imm5,
			aluop          => ALU_AND,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "0101"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0000XXX"
	CONSTANT br_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => "XX",
			aluop          => "XXX",
			shift_imm      => 'X',
			use_offset11   => '0',
			use_pc_adder   => '1',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => logic_mem_control
		,  wb => (
			set_cc         => '0',
			regwrite       => '0'
		), op    => "0000"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1100XXX"
	CONSTANT jmp_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => "XX",
			aluop          => "XXX",
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => '0',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => logic_mem_control
		,  wb => (
			set_cc         => '0',
			regwrite       => '0'
		), op    => "1100"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "01001XX"
	CONSTANT jsr_instr : control_word := (
	    dec   => (
			ldi            => '0',
			sti            => '0',
			use_uop2       => '0',
			override_dr    => '1',
			dr_override    => "0111",
			uop_rom_idx    => uop_rom_idx_default
		), exec  => (
			alumux_sel     => "XX",
			aluop          => ALU_PASS,
			shift_imm      => 'X',
			use_offset11   => '1',
			use_pc_adder   => '1',
			srcamux_sel    => '1',
			srcbbmux_sel   => 'X'
		), mem => logic_mem_control
		,  wb => (
			set_cc         => '0',
			regwrite       => '1'
		), op    => "0100"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "01000XX"
	CONSTANT jsrr_instr : control_word := (
	    dec   => (
			ldi            => '0',
			sti            => '0',
			use_uop2       => '0',
			override_dr    => '1',
			dr_override    => "0111",
			uop_rom_idx    => uop_rom_idx_default
		), exec  => (
			alumux_sel     => "XX",
			aluop          => ALU_PASS,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => '0',
			srcamux_sel    => '1',
			srcbbmux_sel   => 'X'
		), mem => logic_mem_control
		,  wb => (
			set_cc         => '0',
			regwrite       => '1'
		), op    => "0100"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0010XXX"
	CONSTANT ldb_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '0',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => (
			mem_read       => '1',
			mem_read_byte  => '1',
			mem_write_byte => '0',
			mem_write_word => '0'
		), wb => logic_wb_control
		,  op    => "0010"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1010XXX"
	CONSTANT ldi_instr : control_word := (
		dec   => (
			ldi           => '1',
			sti           => '0',
			use_uop2      => '1',
			override_dr   => '1',
			dr_override   => "1000",
			uop_rom_idx   => "0001"
		),
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '1',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => (
			mem_read       => '1',
			mem_read_byte  => '0',
			mem_write_byte => '0',
			mem_write_word => '0'
		), wb => logic_wb_control
		,  op    => "1010"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	CONSTANT ldi2_instr : control_word := (
		dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '1',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => (
			mem_read       => '1',
			mem_read_byte  => '0',
			mem_write_byte => '0',
			mem_write_word => '0'
		), wb => logic_wb_control
		,  op    => "1000"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0110XXX"
	CONSTANT ldr_instr : control_word := (
		dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '1',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => (
			mem_read       => '1',
			mem_read_byte  => '0',
			mem_write_byte => '0',
			mem_write_word => '0'
		), wb => logic_wb_control
		,  op    => "0110"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1110XXX"
	CONSTANT lea_instr : control_word := (
	    dec   => (
			ldi           => '0',
			sti           => '0',
			use_uop2      => '0',
			override_dr   => '0',
			dr_override   => "XXXX",
			uop_rom_idx   => "XXXX"
		), exec  => (
			alumux_sel     => alumux_srbb,
			aluop          => ALU_ADD,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '1',
			srcbbmux_sel   => '1'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "1110"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1001XXX"
	CONSTANT not_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_sr2,
			aluop          => ALU_NOT,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "1001"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1000XXX"
	CONSTANT rti_instr : control_word := default_control_word;

	-- "1101XX0"
	CONSTANT lshf_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_srbb,
			aluop          => ALU_SLL,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => '0'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "1101"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1101X01"
	CONSTANT rshfl_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_srbb,
			aluop          => ALU_SRL,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => '0'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "1101"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1101X11"
	CONSTANT rshfa_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_srbb,
			aluop          => alu_sra,
			shift_imm      => 'X',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => '0'
		), mem   => logic_mem_control
		,  wb    => logic_wb_control
		,  op    => "1101"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0011XXX"
	CONSTANT stb_instr : control_word := (
		dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '0',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => (
			mem_read       => '0',
			mem_read_byte  => '0',
			mem_write_byte => '1',
			mem_write_word => '0'
		), wb    => zero_wb_control
		,  op    => "0011"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1011XXX"
	CONSTANT sti_instr : control_word := (
		dec   => (
			ldi           => '0',
			sti           => '1',
			use_uop2      => '1',
			override_dr   => '1',
			dr_override   => "1000",
			uop_rom_idx   => "0010"
		),
		exec  => (
			alumux_sel    => alumux_idx6,
			aluop         => ALU_ADD,
			shift_imm     => '1',
			use_offset11  => 'X',
			use_pc_adder  => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem => (
			mem_read       => '1',
			mem_read_byte  => '0',
			mem_write_byte => '0',
			mem_write_word => '0'
		), wb => logic_wb_control
		,  op    => "1011"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	CONSTANT sti2_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '1',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => (
			mem_read       => '0',
			mem_read_byte  => '0',
			mem_write_byte => '0',
			mem_write_word => '1'
		), wb    => zero_wb_control
		,  op    => "1000"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "0111XXX"
	CONSTANT str_instr : control_word := (
	    dec   => default_dec_control,
		exec  => (
			alumux_sel     => alumux_idx6,
			aluop          => ALU_ADD,
			shift_imm      => '1',
			use_offset11   => 'X',
			use_pc_adder   => 'X',
			srcamux_sel    => '0',
			srcbbmux_sel   => 'X'
		), mem   => (
			mem_read       => '0',
			mem_read_byte  => '0',
			mem_write_byte => '0',
			mem_write_word => '1'
		), wb    => zero_wb_control
		,  op    => "0111"
		,  pc    => (others => 'X')
		,  instr => (others => 'X')
	);

	-- "1111XXX"
	CONSTANT trap_instr : control_word := default_control_word;
END LC3B_TYPES ;

PACKAGE BODY LC3B_TYPES IS

	PROCEDURE MYDRAMINIT_64K (
		VARIABLE MEM : OUT MEMORY_ARRAY_64K) IS
		BEGIN  -- MYDRAMINIT

	    -- USE THE DOIFY.SH SCRIPT TO LOAD PROGRAMS INTO MEMORY, OR 
	    -- INSERT YOUR MEMORY VECTORS HERE.
	    -- EXAMPLE: MEM(0) := TO_STDLOGICVECTOR(X"00");
	    
		MEM(0) := TO_STDLOGICVECTOR(X"11");
		MEM(1) := TO_STDLOGICVECTOR(X"62");
		MEM(2) := TO_STDLOGICVECTOR(X"12");
		MEM(3) := TO_STDLOGICVECTOR(X"64");
		MEM(4) := TO_STDLOGICVECTOR(X"13");
		MEM(5) := TO_STDLOGICVECTOR(X"66");
		MEM(6) := TO_STDLOGICVECTOR(X"C2");
		MEM(7) := TO_STDLOGICVECTOR(X"18");
		MEM(8) := TO_STDLOGICVECTOR(X"C3");
		MEM(9) := TO_STDLOGICVECTOR(X"16");
		MEM(10) := TO_STDLOGICVECTOR(X"BF");
		MEM(11) := TO_STDLOGICVECTOR(X"9A");
		MEM(12) := TO_STDLOGICVECTOR(X"41");
		MEM(13) := TO_STDLOGICVECTOR(X"1B");
		MEM(14) := TO_STDLOGICVECTOR(X"05");
		MEM(15) := TO_STDLOGICVECTOR(X"19");
		MEM(16) := TO_STDLOGICVECTOR(X"FB");
		MEM(17) := TO_STDLOGICVECTOR(X"07");
		MEM(18) := TO_STDLOGICVECTOR(X"C4");
		MEM(19) := TO_STDLOGICVECTOR(X"5E");
		MEM(20) := TO_STDLOGICVECTOR(X"14");
		MEM(21) := TO_STDLOGICVECTOR(X"7E");
		MEM(22) := TO_STDLOGICVECTOR(X"14");
		MEM(23) := TO_STDLOGICVECTOR(X"62");
		MEM(24) := TO_STDLOGICVECTOR(X"FF");
		MEM(25) := TO_STDLOGICVECTOR(X"91");
		MEM(26) := TO_STDLOGICVECTOR(X"40");
		MEM(27) := TO_STDLOGICVECTOR(X"50");
		MEM(28) := TO_STDLOGICVECTOR(X"14");
		MEM(29) := TO_STDLOGICVECTOR(X"70");
		MEM(30) := TO_STDLOGICVECTOR(X"15");
		MEM(31) := TO_STDLOGICVECTOR(X"62");
		MEM(32) := TO_STDLOGICVECTOR(X"FF");
		MEM(33) := TO_STDLOGICVECTOR(X"0F");
		MEM(34) := TO_STDLOGICVECTOR(X"01");
		MEM(35) := TO_STDLOGICVECTOR(X"00");
		MEM(36) := TO_STDLOGICVECTOR(X"02");
		MEM(37) := TO_STDLOGICVECTOR(X"00");
		MEM(38) := TO_STDLOGICVECTOR(X"08");
		MEM(39) := TO_STDLOGICVECTOR(X"00");
		MEM(40) := TO_STDLOGICVECTOR(X"00");
		MEM(41) := TO_STDLOGICVECTOR(X"00");
		MEM(42) := TO_STDLOGICVECTOR(X"0D");
		MEM(43) := TO_STDLOGICVECTOR(X"60");
		--MAKE NO CHANGES AFTER THIS LINE.
	END MYDRAMINIT_64K;

END LC3B_TYPES;
